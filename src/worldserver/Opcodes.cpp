/* AUTOGENERATED. DO NOT MODIFY !!! */
/* RULES_MTIME: 1223665167.0 */
#include "Opcodes.h"
struct
{
    uint32 Opcode;
    const char *Name;
} PacketNames [] =
{
	{ MSG_NULL_ACTION, "MSG_NULL_ACTION" },
	{ CMSG_BOOTME, "CMSG_BOOTME" },
	{ CMSG_DBLOOKUP, "CMSG_DBLOOKUP" },
	{ SMSG_DBLOOKUP, "SMSG_DBLOOKUP" },
	{ CMSG_QUERY_OBJECT_POSITION, "CMSG_QUERY_OBJECT_POSITION" },
	{ SMSG_QUERY_OBJECT_POSITION, "SMSG_QUERY_OBJECT_POSITION" },
	{ CMSG_QUERY_OBJECT_ROTATION, "CMSG_QUERY_OBJECT_ROTATION" },
	{ SMSG_QUERY_OBJECT_ROTATION, "SMSG_QUERY_OBJECT_ROTATION" },
	{ CMSG_WORLD_TELEPORT, "CMSG_WORLD_TELEPORT" },
	{ CMSG_TELEPORT_TO_UNIT, "CMSG_TELEPORT_TO_UNIT" },
	{ CMSG_ZONE_MAP, "CMSG_ZONE_MAP" },
	{ SMSG_ZONE_MAP, "SMSG_ZONE_MAP" },
	{ CMSG_DEBUG_CHANGECELLZONE, "CMSG_DEBUG_CHANGECELLZONE" },
	{ CMSG_EMBLAZON_TABARD_OBSOLETE, "CMSG_EMBLAZON_TABARD_OBSOLETE" },
	{ CMSG_UNEMBLAZON_TABARD_OBSOLETE, "CMSG_UNEMBLAZON_TABARD_OBSOLETE" },
	{ CMSG_RECHARGE, "CMSG_RECHARGE" },
	{ CMSG_LEARN_SPELL, "CMSG_LEARN_SPELL" },
	{ CMSG_CREATEMONSTER, "CMSG_CREATEMONSTER" },
	{ CMSG_DESTROYMONSTER, "CMSG_DESTROYMONSTER" },
	{ CMSG_CREATEITEM, "CMSG_CREATEITEM" },
	{ CMSG_CREATEGAMEOBJECT, "CMSG_CREATEGAMEOBJECT" },
	{ CMSG_MAKEMONSTERATTACKME, "CMSG_MAKEMONSTERATTACKME" },
	{ CMSG_MAKEMONSTERATTACKGUID, "CMSG_MAKEMONSTERATTACKGUID" },
	{ CMSG_ENABLEDEBUGCOMBATLOGGING_OBSOLETE, "CMSG_ENABLEDEBUGCOMBATLOGGING_OBSOLETE" },
	{ CMSG_FORCEACTION, "CMSG_FORCEACTION" },
	{ CMSG_FORCEACTIONONOTHER, "CMSG_FORCEACTIONONOTHER" },
	{ CMSG_FORCEACTIONSHOW, "CMSG_FORCEACTIONSHOW" },
	{ SMSG_FORCEACTIONSHOW, "SMSG_FORCEACTIONSHOW" },
	{ SMSG_ATTACKERSTATEUPDATEDEBUGINFO_OBSOLETE, "SMSG_ATTACKERSTATEUPDATEDEBUGINFO_OBSOLETE" },
	{ SMSG_DEBUGINFOSPELL_OBSOLETE, "SMSG_DEBUGINFOSPELL_OBSOLETE" },
	{ SMSG_DEBUGINFOSPELLMISS_OBSOLETE, "SMSG_DEBUGINFOSPELLMISS_OBSOLETE" },
	{ SMSG_DEBUG_PLAYER_RANGE_OBSOLETE, "SMSG_DEBUG_PLAYER_RANGE_OBSOLETE" },
	{ CMSG_UNDRESSPLAYER, "CMSG_UNDRESSPLAYER" },
	{ CMSG_BEASTMASTER, "CMSG_BEASTMASTER" },
	{ CMSG_GODMODE, "CMSG_GODMODE" },
	{ SMSG_GODMODE, "SMSG_GODMODE" },
	{ CMSG_CHEAT_SETMONEY, "CMSG_CHEAT_SETMONEY" },
	{ CMSG_LEVEL_CHEAT, "CMSG_LEVEL_CHEAT" },
	{ CMSG_PET_LEVEL_CHEAT, "CMSG_PET_LEVEL_CHEAT" },
	{ CMSG_LEVELUP_CHEAT_OBSOLETE, "CMSG_LEVELUP_CHEAT_OBSOLETE" },
	{ CMSG_COOLDOWN_CHEAT, "CMSG_COOLDOWN_CHEAT" },
	{ CMSG_USE_SKILL_CHEAT, "CMSG_USE_SKILL_CHEAT" },
	{ CMSG_FLAG_QUEST, "CMSG_FLAG_QUEST" },
	{ CMSG_FLAG_QUEST_FINISH, "CMSG_FLAG_QUEST_FINISH" },
	{ CMSG_CLEAR_QUEST, "CMSG_CLEAR_QUEST" },
	{ CMSG_SEND_EVENT, "CMSG_SEND_EVENT" },
	{ CMSG_DEBUG_AISTATE, "CMSG_DEBUG_AISTATE" },
	{ SMSG_DEBUG_AISTATE, "SMSG_DEBUG_AISTATE" },
	{ CMSG_DISABLE_PVP_CHEAT, "CMSG_DISABLE_PVP_CHEAT" },
	{ CMSG_ADVANCE_SPAWN_TIME, "CMSG_ADVANCE_SPAWN_TIME" },
	{ CMSG_PVP_PORT_OBSOLETE, "CMSG_PVP_PORT_OBSOLETE" },
	{ CMSG_AUTH_SRP6_BEGIN, "CMSG_AUTH_SRP6_BEGIN" },
	{ CMSG_AUTH_SRP6_PROOF, "CMSG_AUTH_SRP6_PROOF" },
	{ CMSG_AUTH_SRP6_RECODE, "CMSG_AUTH_SRP6_RECODE" },
	{ CMSG_CHAR_CREATE, "CMSG_CHAR_CREATE" },
	{ CMSG_CHAR_ENUM, "CMSG_CHAR_ENUM" },
	{ CMSG_CHAR_DELETE, "CMSG_CHAR_DELETE" },
	{ SMSG_AUTH_SRP6_RESPONSE, "SMSG_AUTH_SRP6_RESPONSE" },
	{ SMSG_CHAR_CREATE, "SMSG_CHAR_CREATE" },
	{ SMSG_CHAR_ENUM, "SMSG_CHAR_ENUM" },
	{ SMSG_CHAR_DELETE, "SMSG_CHAR_DELETE" },
	{ CMSG_PLAYER_LOGIN, "CMSG_PLAYER_LOGIN" },
	{ SMSG_NEW_WORLD, "SMSG_NEW_WORLD" },
	{ SMSG_TRANSFER_PENDING, "SMSG_TRANSFER_PENDING" },
	{ SMSG_TRANSFER_ABORTED, "SMSG_TRANSFER_ABORTED" },
	{ SMSG_CHARACTER_LOGIN_FAILED, "SMSG_CHARACTER_LOGIN_FAILED" },
	{ SMSG_LOGIN_SETTIMESPEED, "SMSG_LOGIN_SETTIMESPEED" },
	{ SMSG_GAMETIME_UPDATE, "SMSG_GAMETIME_UPDATE" },
	{ CMSG_GAMETIME_SET, "CMSG_GAMETIME_SET" },
	{ SMSG_GAMETIME_SET, "SMSG_GAMETIME_SET" },
	{ CMSG_GAMESPEED_SET, "CMSG_GAMESPEED_SET" },
	{ SMSG_GAMESPEED_SET, "SMSG_GAMESPEED_SET" },
	{ CMSG_SERVERTIME, "CMSG_SERVERTIME" },
	{ SMSG_SERVERTIME, "SMSG_SERVERTIME" },
	{ CMSG_PLAYER_LOGOUT, "CMSG_PLAYER_LOGOUT" },
	{ CMSG_LOGOUT_REQUEST, "CMSG_LOGOUT_REQUEST" },
	{ SMSG_LOGOUT_RESPONSE, "SMSG_LOGOUT_RESPONSE" },
	{ SMSG_LOGOUT_COMPLETE, "SMSG_LOGOUT_COMPLETE" },
	{ CMSG_LOGOUT_CANCEL, "CMSG_LOGOUT_CANCEL" },
	{ SMSG_LOGOUT_CANCEL_ACK, "SMSG_LOGOUT_CANCEL_ACK" },
	{ CMSG_NAME_QUERY, "CMSG_NAME_QUERY" },
	{ SMSG_NAME_QUERY_RESPONSE, "SMSG_NAME_QUERY_RESPONSE" },
	{ CMSG_PET_NAME_QUERY, "CMSG_PET_NAME_QUERY" },
	{ SMSG_PET_NAME_QUERY_RESPONSE, "SMSG_PET_NAME_QUERY_RESPONSE" },
	{ CMSG_GUILD_QUERY, "CMSG_GUILD_QUERY" },
	{ SMSG_GUILD_QUERY_RESPONSE, "SMSG_GUILD_QUERY_RESPONSE" },
	{ CMSG_ITEM_QUERY_SINGLE, "CMSG_ITEM_QUERY_SINGLE" },
	{ CMSG_ITEM_QUERY_MULTIPLE, "CMSG_ITEM_QUERY_MULTIPLE" },
	{ SMSG_ITEM_QUERY_SINGLE_RESPONSE, "SMSG_ITEM_QUERY_SINGLE_RESPONSE" },
	{ SMSG_ITEM_QUERY_MULTIPLE_RESPONSE, "SMSG_ITEM_QUERY_MULTIPLE_RESPONSE" },
	{ CMSG_PAGE_TEXT_QUERY, "CMSG_PAGE_TEXT_QUERY" },
	{ SMSG_PAGE_TEXT_QUERY_RESPONSE, "SMSG_PAGE_TEXT_QUERY_RESPONSE" },
	{ CMSG_QUEST_QUERY, "CMSG_QUEST_QUERY" },
	{ SMSG_QUEST_QUERY_RESPONSE, "SMSG_QUEST_QUERY_RESPONSE" },
	{ CMSG_GAMEOBJECT_QUERY, "CMSG_GAMEOBJECT_QUERY" },
	{ SMSG_GAMEOBJECT_QUERY_RESPONSE, "SMSG_GAMEOBJECT_QUERY_RESPONSE" },
	{ CMSG_CREATURE_QUERY, "CMSG_CREATURE_QUERY" },
	{ SMSG_CREATURE_QUERY_RESPONSE, "SMSG_CREATURE_QUERY_RESPONSE" },
	{ CMSG_WHO, "CMSG_WHO" },
	{ SMSG_WHO, "SMSG_WHO" },
	{ CMSG_WHOIS, "CMSG_WHOIS" },
	{ SMSG_WHOIS, "SMSG_WHOIS" },
	{ CMSG_FRIEND_LIST, "CMSG_FRIEND_LIST" },
	{ SMSG_FRIEND_LIST, "SMSG_FRIEND_LIST" },
	{ SMSG_FRIEND_STATUS, "SMSG_FRIEND_STATUS" },
	{ CMSG_ADD_FRIEND, "CMSG_ADD_FRIEND" },
	{ CMSG_DEL_FRIEND, "CMSG_DEL_FRIEND" },
	{ SMSG_IGNORE_LIST, "SMSG_IGNORE_LIST" },
	{ CMSG_ADD_IGNORE, "CMSG_ADD_IGNORE" },
	{ CMSG_DEL_IGNORE, "CMSG_DEL_IGNORE" },
	{ CMSG_GROUP_INVITE, "CMSG_GROUP_INVITE" },
	{ SMSG_GROUP_INVITE, "SMSG_GROUP_INVITE" },
	{ CMSG_GROUP_CANCEL, "CMSG_GROUP_CANCEL" },
	{ SMSG_GROUP_CANCEL, "SMSG_GROUP_CANCEL" },
	{ CMSG_GROUP_ACCEPT, "CMSG_GROUP_ACCEPT" },
	{ CMSG_GROUP_DECLINE, "CMSG_GROUP_DECLINE" },
	{ SMSG_GROUP_DECLINE, "SMSG_GROUP_DECLINE" },
	{ CMSG_GROUP_UNINVITE, "CMSG_GROUP_UNINVITE" },
	{ CMSG_GROUP_UNINVITE_GUID, "CMSG_GROUP_UNINVITE_GUID" },
	{ SMSG_GROUP_UNINVITE, "SMSG_GROUP_UNINVITE" },
	{ CMSG_GROUP_SET_LEADER, "CMSG_GROUP_SET_LEADER" },
	{ SMSG_GROUP_SET_LEADER, "SMSG_GROUP_SET_LEADER" },
	{ CMSG_LOOT_METHOD, "CMSG_LOOT_METHOD" },
	{ CMSG_GROUP_DISBAND, "CMSG_GROUP_DISBAND" },
	{ SMSG_GROUP_DESTROYED, "SMSG_GROUP_DESTROYED" },
	{ SMSG_GROUP_LIST, "SMSG_GROUP_LIST" },
	{ SMSG_PARTY_MEMBER_STATS, "SMSG_PARTY_MEMBER_STATS" },
	{ SMSG_PARTY_COMMAND_RESULT, "SMSG_PARTY_COMMAND_RESULT" },
	{ UMSG_UPDATE_GROUP_MEMBERS, "UMSG_UPDATE_GROUP_MEMBERS" },
	{ CMSG_GUILD_CREATE, "CMSG_GUILD_CREATE" },
	{ CMSG_GUILD_INVITE, "CMSG_GUILD_INVITE" },
	{ SMSG_GUILD_INVITE, "SMSG_GUILD_INVITE" },
	{ CMSG_GUILD_ACCEPT, "CMSG_GUILD_ACCEPT" },
	{ CMSG_GUILD_DECLINE, "CMSG_GUILD_DECLINE" },
	{ SMSG_GUILD_DECLINE, "SMSG_GUILD_DECLINE" },
	{ CMSG_GUILD_INFO, "CMSG_GUILD_INFO" },
	{ SMSG_GUILD_INFO, "SMSG_GUILD_INFO" },
	{ CMSG_GUILD_ROSTER, "CMSG_GUILD_ROSTER" },
	{ SMSG_GUILD_ROSTER, "SMSG_GUILD_ROSTER" },
	{ CMSG_GUILD_PROMOTE, "CMSG_GUILD_PROMOTE" },
	{ CMSG_GUILD_DEMOTE, "CMSG_GUILD_DEMOTE" },
	{ CMSG_GUILD_LEAVE, "CMSG_GUILD_LEAVE" },
	{ CMSG_GUILD_REMOVE, "CMSG_GUILD_REMOVE" },
	{ CMSG_GUILD_DISBAND, "CMSG_GUILD_DISBAND" },
	{ CMSG_GUILD_LEADER, "CMSG_GUILD_LEADER" },
	{ CMSG_GUILD_MOTD, "CMSG_GUILD_MOTD" },
	{ SMSG_GUILD_EVENT, "SMSG_GUILD_EVENT" },
	{ SMSG_GUILD_COMMAND_RESULT, "SMSG_GUILD_COMMAND_RESULT" },
	{ UMSG_UPDATE_GUILD, "UMSG_UPDATE_GUILD" },
	{ CMSG_MESSAGECHAT, "CMSG_MESSAGECHAT" },
	{ SMSG_MESSAGECHAT, "SMSG_MESSAGECHAT" },
	{ CMSG_JOIN_CHANNEL, "CMSG_JOIN_CHANNEL" },
	{ CMSG_LEAVE_CHANNEL, "CMSG_LEAVE_CHANNEL" },
	{ SMSG_CHANNEL_NOTIFY, "SMSG_CHANNEL_NOTIFY" },
	{ CMSG_CHANNEL_LIST, "CMSG_CHANNEL_LIST" },
	{ SMSG_CHANNEL_LIST, "SMSG_CHANNEL_LIST" },
	{ CMSG_CHANNEL_PASSWORD, "CMSG_CHANNEL_PASSWORD" },
	{ CMSG_CHANNEL_SET_OWNER, "CMSG_CHANNEL_SET_OWNER" },
	{ CMSG_CHANNEL_OWNER, "CMSG_CHANNEL_OWNER" },
	{ CMSG_CHANNEL_MODERATOR, "CMSG_CHANNEL_MODERATOR" },
	{ CMSG_CHANNEL_UNMODERATOR, "CMSG_CHANNEL_UNMODERATOR" },
	{ CMSG_CHANNEL_MUTE, "CMSG_CHANNEL_MUTE" },
	{ CMSG_CHANNEL_UNMUTE, "CMSG_CHANNEL_UNMUTE" },
	{ CMSG_CHANNEL_INVITE, "CMSG_CHANNEL_INVITE" },
	{ CMSG_CHANNEL_KICK, "CMSG_CHANNEL_KICK" },
	{ CMSG_CHANNEL_BAN, "CMSG_CHANNEL_BAN" },
	{ CMSG_CHANNEL_UNBAN, "CMSG_CHANNEL_UNBAN" },
	{ CMSG_CHANNEL_ANNOUNCEMENTS, "CMSG_CHANNEL_ANNOUNCEMENTS" },
	{ CMSG_CHANNEL_MODERATE, "CMSG_CHANNEL_MODERATE" },
	{ SMSG_UPDATE_OBJECT, "SMSG_UPDATE_OBJECT" },
	{ SMSG_DESTROY_OBJECT, "SMSG_DESTROY_OBJECT" },
	{ CMSG_USE_ITEM, "CMSG_USE_ITEM" },
	{ CMSG_OPEN_ITEM, "CMSG_OPEN_ITEM" },
	{ CMSG_READ_ITEM, "CMSG_READ_ITEM" },
	{ SMSG_READ_ITEM_OK, "SMSG_READ_ITEM_OK" },
	{ SMSG_READ_ITEM_FAILED, "SMSG_READ_ITEM_FAILED" },
	{ SMSG_ITEM_COOLDOWN, "SMSG_ITEM_COOLDOWN" },
	{ CMSG_GAMEOBJ_USE, "CMSG_GAMEOBJ_USE" },
	{ CMSG_GAMEOBJ_CHAIR_USE_OBSOLETE, "CMSG_GAMEOBJ_CHAIR_USE_OBSOLETE" },
	{ SMSG_GAMEOBJECT_CUSTOM_ANIM, "SMSG_GAMEOBJECT_CUSTOM_ANIM" },
	{ CMSG_AREATRIGGER, "CMSG_AREATRIGGER" },
	{ MSG_MOVE_START_FORWARD, "MSG_MOVE_START_FORWARD" },
	{ MSG_MOVE_START_BACKWARD, "MSG_MOVE_START_BACKWARD" },
	{ MSG_MOVE_STOP, "MSG_MOVE_STOP" },
	{ MSG_MOVE_START_STRAFE_LEFT, "MSG_MOVE_START_STRAFE_LEFT" },
	{ MSG_MOVE_START_STRAFE_RIGHT, "MSG_MOVE_START_STRAFE_RIGHT" },
	{ MSG_MOVE_STOP_STRAFE, "MSG_MOVE_STOP_STRAFE" },
	{ MSG_MOVE_JUMP, "MSG_MOVE_JUMP" },
	{ MSG_MOVE_START_TURN_LEFT, "MSG_MOVE_START_TURN_LEFT" },
	{ MSG_MOVE_START_TURN_RIGHT, "MSG_MOVE_START_TURN_RIGHT" },
	{ MSG_MOVE_STOP_TURN, "MSG_MOVE_STOP_TURN" },
	{ MSG_MOVE_START_PITCH_UP, "MSG_MOVE_START_PITCH_UP" },
	{ MSG_MOVE_START_PITCH_DOWN, "MSG_MOVE_START_PITCH_DOWN" },
	{ MSG_MOVE_STOP_PITCH, "MSG_MOVE_STOP_PITCH" },
	{ MSG_MOVE_SET_RUN_MODE, "MSG_MOVE_SET_RUN_MODE" },
	{ MSG_MOVE_SET_WALK_MODE, "MSG_MOVE_SET_WALK_MODE" },
	{ MSG_MOVE_TOGGLE_LOGGING, "MSG_MOVE_TOGGLE_LOGGING" },
	{ MSG_MOVE_TELEPORT, "MSG_MOVE_TELEPORT" },
	{ MSG_MOVE_TELEPORT_CHEAT, "MSG_MOVE_TELEPORT_CHEAT" },
	{ MSG_MOVE_TELEPORT_ACK, "MSG_MOVE_TELEPORT_ACK" },
	{ MSG_MOVE_TOGGLE_FALL_LOGGING, "MSG_MOVE_TOGGLE_FALL_LOGGING" },
	{ MSG_MOVE_FALL_LAND, "MSG_MOVE_FALL_LAND" },
	{ MSG_MOVE_START_SWIM, "MSG_MOVE_START_SWIM" },
	{ MSG_MOVE_STOP_SWIM, "MSG_MOVE_STOP_SWIM" },
	{ MSG_MOVE_SET_RUN_SPEED_CHEAT, "MSG_MOVE_SET_RUN_SPEED_CHEAT" },
	{ MSG_MOVE_SET_RUN_SPEED, "MSG_MOVE_SET_RUN_SPEED" },
	{ MSG_MOVE_SET_RUN_BACK_SPEED_CHEAT, "MSG_MOVE_SET_RUN_BACK_SPEED_CHEAT" },
	{ MSG_MOVE_SET_RUN_BACK_SPEED, "MSG_MOVE_SET_RUN_BACK_SPEED" },
	{ MSG_MOVE_SET_WALK_SPEED_CHEAT, "MSG_MOVE_SET_WALK_SPEED_CHEAT" },
	{ MSG_MOVE_SET_WALK_SPEED, "MSG_MOVE_SET_WALK_SPEED" },
	{ MSG_MOVE_SET_SWIM_SPEED_CHEAT, "MSG_MOVE_SET_SWIM_SPEED_CHEAT" },
	{ MSG_MOVE_SET_SWIM_SPEED, "MSG_MOVE_SET_SWIM_SPEED" },
	{ MSG_MOVE_SET_SWIM_BACK_SPEED_CHEAT, "MSG_MOVE_SET_SWIM_BACK_SPEED_CHEAT" },
	{ MSG_MOVE_SET_SWIM_BACK_SPEED, "MSG_MOVE_SET_SWIM_BACK_SPEED" },
	{ MSG_MOVE_SET_ALL_SPEED_CHEAT, "MSG_MOVE_SET_ALL_SPEED_CHEAT" },
	{ MSG_MOVE_SET_TURN_RATE_CHEAT, "MSG_MOVE_SET_TURN_RATE_CHEAT" },
	{ MSG_MOVE_SET_TURN_RATE, "MSG_MOVE_SET_TURN_RATE" },
	{ MSG_MOVE_TOGGLE_COLLISION_CHEAT, "MSG_MOVE_TOGGLE_COLLISION_CHEAT" },
	{ MSG_MOVE_SET_FACING, "MSG_MOVE_SET_FACING" },
	{ MSG_MOVE_SET_PITCH, "MSG_MOVE_SET_PITCH" },
	{ MSG_MOVE_WORLDPORT_ACK, "MSG_MOVE_WORLDPORT_ACK" },
	{ SMSG_MONSTER_MOVE, "SMSG_MONSTER_MOVE" },
	{ SMSG_MOVE_WATER_WALK, "SMSG_MOVE_WATER_WALK" },
	{ SMSG_MOVE_LAND_WALK, "SMSG_MOVE_LAND_WALK" },
	{ MSG_MOVE_SET_RAW_POSITION_ACK, "MSG_MOVE_SET_RAW_POSITION_ACK" },
	{ CMSG_MOVE_SET_RAW_POSITION, "CMSG_MOVE_SET_RAW_POSITION" },
	{ SMSG_FORCE_RUN_SPEED_CHANGE, "SMSG_FORCE_RUN_SPEED_CHANGE" },
	{ CMSG_FORCE_RUN_SPEED_CHANGE_ACK, "CMSG_FORCE_RUN_SPEED_CHANGE_ACK" },
	{ SMSG_FORCE_RUN_BACK_SPEED_CHANGE, "SMSG_FORCE_RUN_BACK_SPEED_CHANGE" },
	{ CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK, "CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK" },
	{ SMSG_FORCE_SWIM_SPEED_CHANGE, "SMSG_FORCE_SWIM_SPEED_CHANGE" },
	{ CMSG_FORCE_SWIM_SPEED_CHANGE_ACK, "CMSG_FORCE_SWIM_SPEED_CHANGE_ACK" },
	{ SMSG_FORCE_MOVE_ROOT, "SMSG_FORCE_MOVE_ROOT" },
	{ CMSG_FORCE_MOVE_ROOT_ACK, "CMSG_FORCE_MOVE_ROOT_ACK" },
	{ SMSG_FORCE_MOVE_UNROOT, "SMSG_FORCE_MOVE_UNROOT" },
	{ CMSG_FORCE_MOVE_UNROOT_ACK, "CMSG_FORCE_MOVE_UNROOT_ACK" },
	{ MSG_MOVE_ROOT, "MSG_MOVE_ROOT" },
	{ MSG_MOVE_UNROOT, "MSG_MOVE_UNROOT" },
	{ MSG_MOVE_HEARTBEAT, "MSG_MOVE_HEARTBEAT" },
	{ SMSG_MOVE_KNOCK_BACK, "SMSG_MOVE_KNOCK_BACK" },
	{ CMSG_MOVE_KNOCK_BACK_ACK, "CMSG_MOVE_KNOCK_BACK_ACK" },
	{ MSG_MOVE_KNOCK_BACK, "MSG_MOVE_KNOCK_BACK" },
	{ SMSG_MOVE_FEATHER_FALL, "SMSG_MOVE_FEATHER_FALL" },
	{ SMSG_MOVE_NORMAL_FALL, "SMSG_MOVE_NORMAL_FALL" },
	{ SMSG_MOVE_SET_HOVER, "SMSG_MOVE_SET_HOVER" },
	{ SMSG_MOVE_UNSET_HOVER, "SMSG_MOVE_UNSET_HOVER" },
	{ CMSG_MOVE_HOVER_ACK, "CMSG_MOVE_HOVER_ACK" },
	{ MSG_MOVE_HOVER, "MSG_MOVE_HOVER" },
	{ CMSG_TRIGGER_CINEMATIC_CHEAT, "CMSG_TRIGGER_CINEMATIC_CHEAT" },
	{ CMSG_OPENING_CINEMATIC, "CMSG_OPENING_CINEMATIC" },
	{ SMSG_TRIGGER_CINEMATIC, "SMSG_TRIGGER_CINEMATIC" },
	{ CMSG_NEXT_CINEMATIC_CAMERA, "CMSG_NEXT_CINEMATIC_CAMERA" },
	{ CMSG_COMPLETE_CINEMATIC, "CMSG_COMPLETE_CINEMATIC" },
	{ SMSG_TUTORIAL_FLAGS, "SMSG_TUTORIAL_FLAGS" },
	{ CMSG_TUTORIAL_FLAG, "CMSG_TUTORIAL_FLAG" },
	{ CMSG_TUTORIAL_CLEAR, "CMSG_TUTORIAL_CLEAR" },
	{ CMSG_TUTORIAL_RESET, "CMSG_TUTORIAL_RESET" },
	{ CMSG_STANDSTATECHANGE, "CMSG_STANDSTATECHANGE" },
	{ CMSG_EMOTE, "CMSG_EMOTE" },
	{ SMSG_EMOTE, "SMSG_EMOTE" },
	{ CMSG_TEXT_EMOTE, "CMSG_TEXT_EMOTE" },
	{ SMSG_TEXT_EMOTE, "SMSG_TEXT_EMOTE" },
	{ CMSG_AUTOEQUIP_GROUND_ITEM, "CMSG_AUTOEQUIP_GROUND_ITEM" },
	{ CMSG_AUTOSTORE_GROUND_ITEM, "CMSG_AUTOSTORE_GROUND_ITEM" },
	{ CMSG_AUTOSTORE_LOOT_ITEM, "CMSG_AUTOSTORE_LOOT_ITEM" },
	{ CMSG_STORE_LOOT_IN_SLOT, "CMSG_STORE_LOOT_IN_SLOT" },
	{ CMSG_AUTOEQUIP_ITEM, "CMSG_AUTOEQUIP_ITEM" },
	{ CMSG_AUTOSTORE_BAG_ITEM, "CMSG_AUTOSTORE_BAG_ITEM" },
	{ CMSG_SWAP_ITEM, "CMSG_SWAP_ITEM" },
	{ CMSG_SWAP_INV_ITEM, "CMSG_SWAP_INV_ITEM" },
	{ CMSG_SPLIT_ITEM, "CMSG_SPLIT_ITEM" },
	{ CMSG_PICKUP_ITEM, "CMSG_PICKUP_ITEM" },
	{ CMSG_DROP_ITEM, "CMSG_DROP_ITEM" },
	{ CMSG_DESTROYITEM, "CMSG_DESTROYITEM" },
	{ SMSG_INVENTORY_CHANGE_FAILURE, "SMSG_INVENTORY_CHANGE_FAILURE" },
	{ SMSG_OPEN_CONTAINER, "SMSG_OPEN_CONTAINER" },
	{ CMSG_INSPECT, "CMSG_INSPECT" },
	{ SMSG_INSPECT, "SMSG_INSPECT" },
	{ CMSG_INITIATE_TRADE, "CMSG_INITIATE_TRADE" },
	{ CMSG_BEGIN_TRADE, "CMSG_BEGIN_TRADE" },
	{ CMSG_BUSY_TRADE, "CMSG_BUSY_TRADE" },
	{ CMSG_IGNORE_TRADE, "CMSG_IGNORE_TRADE" },
	{ CMSG_ACCEPT_TRADE, "CMSG_ACCEPT_TRADE" },
	{ CMSG_UNACCEPT_TRADE, "CMSG_UNACCEPT_TRADE" },
	{ CMSG_CANCEL_TRADE, "CMSG_CANCEL_TRADE" },
	{ CMSG_SET_TRADE_ITEM, "CMSG_SET_TRADE_ITEM" },
	{ CMSG_CLEAR_TRADE_ITEM, "CMSG_CLEAR_TRADE_ITEM" },
	{ CMSG_SET_TRADE_GOLD, "CMSG_SET_TRADE_GOLD" },
	{ SMSG_TRADE_STATUS, "SMSG_TRADE_STATUS" },
	{ SMSG_TRADE_STATUS_EXTENDED, "SMSG_TRADE_STATUS_EXTENDED" },
	{ SMSG_INITIALIZE_FACTIONS, "SMSG_INITIALIZE_FACTIONS" },
	{ SMSG_SET_FACTION_VISIBLE, "SMSG_SET_FACTION_VISIBLE" },
	{ SMSG_SET_FACTION_STANDING, "SMSG_SET_FACTION_STANDING" },
	{ CMSG_SET_FACTION_ATWAR, "CMSG_SET_FACTION_ATWAR" },
	{ CMSG_SET_FACTION_CHEAT, "CMSG_SET_FACTION_CHEAT" },
	{ SMSG_SET_PROFICIENCY, "SMSG_SET_PROFICIENCY" },
	{ CMSG_SET_ACTION_BUTTON, "CMSG_SET_ACTION_BUTTON" },
	{ SMSG_ACTION_BUTTONS, "SMSG_ACTION_BUTTONS" },
	{ SMSG_INITIAL_SPELLS, "SMSG_INITIAL_SPELLS" },
	{ SMSG_LEARNED_SPELL, "SMSG_LEARNED_SPELL" },
	{ SMSG_SUPERCEDED_SPELL, "SMSG_SUPERCEDED_SPELL" },
	{ CMSG_NEW_SPELL_SLOT, "CMSG_NEW_SPELL_SLOT" },
	{ CMSG_CAST_SPELL, "CMSG_CAST_SPELL" },
	{ CMSG_CANCEL_CAST, "CMSG_CANCEL_CAST" },
	{ SMSG_CAST_RESULT, "SMSG_CAST_RESULT" },
	{ SMSG_SPELL_START, "SMSG_SPELL_START" },
	{ SMSG_SPELL_GO, "SMSG_SPELL_GO" },
	{ SMSG_SPELL_FAILURE, "SMSG_SPELL_FAILURE" },
	{ SMSG_SPELL_COOLDOWN, "SMSG_SPELL_COOLDOWN" },
	{ SMSG_COOLDOWN_EVENT, "SMSG_COOLDOWN_EVENT" },
	{ CMSG_CANCEL_AURA, "CMSG_CANCEL_AURA" },
	{ SMSG_UPDATE_AURA_DURATION, "SMSG_UPDATE_AURA_DURATION" },
	{ SMSG_PET_CAST_FAILED, "SMSG_PET_CAST_FAILED" },
	{ MSG_CHANNEL_START, "MSG_CHANNEL_START" },
	{ MSG_CHANNEL_UPDATE, "MSG_CHANNEL_UPDATE" },
	{ CMSG_CANCEL_CHANNELLING, "CMSG_CANCEL_CHANNELLING" },
	{ SMSG_AI_REACTION, "SMSG_AI_REACTION" },
	{ CMSG_SET_SELECTION, "CMSG_SET_SELECTION" },
	{ CMSG_SET_TARGET, "CMSG_SET_TARGET" },
	{ CMSG_UNUSED, "CMSG_UNUSED" },
	{ CMSG_UNUSED2, "CMSG_UNUSED2" },
	{ CMSG_ATTACKSWING, "CMSG_ATTACKSWING" },
	{ CMSG_ATTACKSTOP, "CMSG_ATTACKSTOP" },
	{ SMSG_ATTACKSTART, "SMSG_ATTACKSTART" },
	{ SMSG_ATTACKSTOP, "SMSG_ATTACKSTOP" },
	{ SMSG_ATTACKSWING_NOTINRANGE, "SMSG_ATTACKSWING_NOTINRANGE" },
	{ SMSG_ATTACKSWING_BADFACING, "SMSG_ATTACKSWING_BADFACING" },
	{ SMSG_ATTACKSWING_NOTSTANDING, "SMSG_ATTACKSWING_NOTSTANDING" },
	{ SMSG_ATTACKSWING_DEADTARGET, "SMSG_ATTACKSWING_DEADTARGET" },
	{ SMSG_ATTACKSWING_CANT_ATTACK, "SMSG_ATTACKSWING_CANT_ATTACK" },
	{ SMSG_ATTACKERSTATEUPDATE, "SMSG_ATTACKERSTATEUPDATE" },
	{ SMSG_VICTIMSTATEUPDATE_OBSOLETE, "SMSG_VICTIMSTATEUPDATE_OBSOLETE" },
	{ SMSG_DAMAGE_DONE_OBSOLETE, "SMSG_DAMAGE_DONE_OBSOLETE" },
	{ SMSG_DAMAGE_TAKEN_OBSOLETE, "SMSG_DAMAGE_TAKEN_OBSOLETE" },
	{ SMSG_CANCEL_COMBAT, "SMSG_CANCEL_COMBAT" },
	{ SMSG_PLAYER_COMBAT_XP_GAIN_OBSOLETE, "SMSG_PLAYER_COMBAT_XP_GAIN_OBSOLETE" },
	{ SMSG_HEALSPELL_ON_PLAYER_OBSOLETE, "SMSG_HEALSPELL_ON_PLAYER_OBSOLETE" },
	{ SMSG_HEALSPELL_ON_PLAYERS_PET_OBSOLETE, "SMSG_HEALSPELL_ON_PLAYERS_PET_OBSOLETE" },
	{ CMSG_SHEATHE_OBSOLETE, "CMSG_SHEATHE_OBSOLETE" },
	{ CMSG_SAVE_PLAYER, "CMSG_SAVE_PLAYER" },
	{ CMSG_SETDEATHBINDPOINT, "CMSG_SETDEATHBINDPOINT" },
	{ SMSG_BINDPOINTUPDATE, "SMSG_BINDPOINTUPDATE" },
	{ CMSG_GETDEATHBINDZONE, "CMSG_GETDEATHBINDZONE" },
	{ SMSG_BINDZONEREPLY, "SMSG_BINDZONEREPLY" },
	{ SMSG_PLAYERBOUND, "SMSG_PLAYERBOUND" },
	{ SMSG_DEATH_NOTIFY_OBSOLETE, "SMSG_DEATH_NOTIFY_OBSOLETE" },
	{ CMSG_REPOP_REQUEST, "CMSG_REPOP_REQUEST" },
	{ SMSG_RESURRECT_REQUEST, "SMSG_RESURRECT_REQUEST" },
	{ CMSG_RESURRECT_RESPONSE, "CMSG_RESURRECT_RESPONSE" },
	{ CMSG_LOOT, "CMSG_LOOT" },
	{ CMSG_LOOT_MONEY, "CMSG_LOOT_MONEY" },
	{ CMSG_LOOT_RELEASE, "CMSG_LOOT_RELEASE" },
	{ SMSG_LOOT_RESPONSE, "SMSG_LOOT_RESPONSE" },
	{ SMSG_LOOT_RELEASE_RESPONSE, "SMSG_LOOT_RELEASE_RESPONSE" },
	{ SMSG_LOOT_REMOVED, "SMSG_LOOT_REMOVED" },
	{ SMSG_LOOT_MONEY_NOTIFY, "SMSG_LOOT_MONEY_NOTIFY" },
	{ SMSG_LOOT_ITEM_NOTIFY, "SMSG_LOOT_ITEM_NOTIFY" },
	{ SMSG_LOOT_CLEAR_MONEY, "SMSG_LOOT_CLEAR_MONEY" },
	{ SMSG_ITEM_PUSH_RESULT, "SMSG_ITEM_PUSH_RESULT" },
	{ SMSG_DUEL_REQUESTED, "SMSG_DUEL_REQUESTED" },
	{ SMSG_DUEL_OUTOFBOUNDS, "SMSG_DUEL_OUTOFBOUNDS" },
	{ SMSG_DUEL_INBOUNDS, "SMSG_DUEL_INBOUNDS" },
	{ SMSG_DUEL_COMPLETE, "SMSG_DUEL_COMPLETE" },
	{ SMSG_DUEL_WINNER, "SMSG_DUEL_WINNER" },
	{ CMSG_DUEL_ACCEPTED, "CMSG_DUEL_ACCEPTED" },
	{ CMSG_DUEL_CANCELLED, "CMSG_DUEL_CANCELLED" },
	{ SMSG_MOUNTRESULT, "SMSG_MOUNTRESULT" },
	{ SMSG_DISMOUNTRESULT, "SMSG_DISMOUNTRESULT" },
	{ SMSG_PUREMOUNT_CANCELLED_OBSOLETE, "SMSG_PUREMOUNT_CANCELLED_OBSOLETE" },
	{ CMSG_MOUNTSPECIAL_ANIM, "CMSG_MOUNTSPECIAL_ANIM" },
	{ SMSG_MOUNTSPECIAL_ANIM, "SMSG_MOUNTSPECIAL_ANIM" },
	{ SMSG_PET_TAME_FAILURE, "SMSG_PET_TAME_FAILURE" },
	{ CMSG_PET_SET_ACTION, "CMSG_PET_SET_ACTION" },
	{ CMSG_PET_ACTION, "CMSG_PET_ACTION" },
	{ CMSG_PET_ABANDON, "CMSG_PET_ABANDON" },
	{ CMSG_PET_RENAME, "CMSG_PET_RENAME" },
	{ SMSG_PET_NAME_INVALID, "SMSG_PET_NAME_INVALID" },
	{ SMSG_PET_SPELLS, "SMSG_PET_SPELLS" },
	{ CMSG_PET_CAST_SPELL_OBSOLETE, "CMSG_PET_CAST_SPELL_OBSOLETE" },
	{ CMSG_GOSSIP_HELLO, "CMSG_GOSSIP_HELLO" },
	{ CMSG_GOSSIP_SELECT_OPTION, "CMSG_GOSSIP_SELECT_OPTION" },
	{ SMSG_GOSSIP_MESSAGE, "SMSG_GOSSIP_MESSAGE" },
	{ SMSG_GOSSIP_COMPLETE, "SMSG_GOSSIP_COMPLETE" },
	{ CMSG_NPC_TEXT_QUERY, "CMSG_NPC_TEXT_QUERY" },
	{ SMSG_NPC_TEXT_UPDATE, "SMSG_NPC_TEXT_UPDATE" },
	{ SMSG_NPC_WONT_TALK, "SMSG_NPC_WONT_TALK" },
	{ CMSG_QUESTGIVER_STATUS_QUERY, "CMSG_QUESTGIVER_STATUS_QUERY" },
	{ SMSG_QUESTGIVER_STATUS, "SMSG_QUESTGIVER_STATUS" },
	{ CMSG_QUESTGIVER_HELLO, "CMSG_QUESTGIVER_HELLO" },
	{ SMSG_QUESTGIVER_QUEST_LIST, "SMSG_QUESTGIVER_QUEST_LIST" },
	{ CMSG_QUESTGIVER_QUERY_QUEST, "CMSG_QUESTGIVER_QUERY_QUEST" },
	{ CMSG_QUESTGIVER_QUEST_AUTOLAUNCH, "CMSG_QUESTGIVER_QUEST_AUTOLAUNCH" },
	{ SMSG_QUESTGIVER_QUEST_DETAILS, "SMSG_QUESTGIVER_QUEST_DETAILS" },
	{ CMSG_QUESTGIVER_ACCEPT_QUEST, "CMSG_QUESTGIVER_ACCEPT_QUEST" },
	{ CMSG_QUESTGIVER_COMPLETE_QUEST, "CMSG_QUESTGIVER_COMPLETE_QUEST" },
	{ SMSG_QUESTGIVER_REQUEST_ITEMS, "SMSG_QUESTGIVER_REQUEST_ITEMS" },
	{ CMSG_QUESTGIVER_REQUEST_REWARD, "CMSG_QUESTGIVER_REQUEST_REWARD" },
	{ SMSG_QUESTGIVER_OFFER_REWARD, "SMSG_QUESTGIVER_OFFER_REWARD" },
	{ CMSG_QUESTGIVER_CHOOSE_REWARD, "CMSG_QUESTGIVER_CHOOSE_REWARD" },
	{ SMSG_QUESTGIVER_QUEST_INVALID, "SMSG_QUESTGIVER_QUEST_INVALID" },
	{ CMSG_QUESTGIVER_CANCEL, "CMSG_QUESTGIVER_CANCEL" },
	{ SMSG_QUESTGIVER_QUEST_COMPLETE, "SMSG_QUESTGIVER_QUEST_COMPLETE" },
	{ SMSG_QUESTGIVER_QUEST_FAILED, "SMSG_QUESTGIVER_QUEST_FAILED" },
	{ CMSG_QUESTLOG_SWAP_QUEST, "CMSG_QUESTLOG_SWAP_QUEST" },
	{ CMSG_QUESTLOG_REMOVE_QUEST, "CMSG_QUESTLOG_REMOVE_QUEST" },
	{ SMSG_QUESTLOG_FULL, "SMSG_QUESTLOG_FULL" },
	{ SMSG_QUESTUPDATE_FAILED, "SMSG_QUESTUPDATE_FAILED" },
	{ SMSG_QUESTUPDATE_FAILEDTIMER, "SMSG_QUESTUPDATE_FAILEDTIMER" },
	{ SMSG_QUESTUPDATE_COMPLETE, "SMSG_QUESTUPDATE_COMPLETE" },
	{ SMSG_QUESTUPDATE_ADD_KILL, "SMSG_QUESTUPDATE_ADD_KILL" },
	{ SMSG_QUESTUPDATE_ADD_ITEM, "SMSG_QUESTUPDATE_ADD_ITEM" },
	{ CMSG_QUEST_CONFIRM_ACCEPT, "CMSG_QUEST_CONFIRM_ACCEPT" },
	{ SMSG_QUEST_CONFIRM_ACCEPT, "SMSG_QUEST_CONFIRM_ACCEPT" },
	{ CMSG_PUSHQUESTTOPARTY, "CMSG_PUSHQUESTTOPARTY" },
	{ CMSG_LIST_INVENTORY, "CMSG_LIST_INVENTORY" },
	{ SMSG_LIST_INVENTORY, "SMSG_LIST_INVENTORY" },
	{ CMSG_SELL_ITEM, "CMSG_SELL_ITEM" },
	{ SMSG_SELL_ITEM, "SMSG_SELL_ITEM" },
	{ CMSG_BUY_ITEM, "CMSG_BUY_ITEM" },
	{ CMSG_BUY_ITEM_IN_SLOT, "CMSG_BUY_ITEM_IN_SLOT" },
	{ SMSG_BUY_ITEM, "SMSG_BUY_ITEM" },
	{ SMSG_BUY_FAILED, "SMSG_BUY_FAILED" },
	{ CMSG_TAXICLEARALLNODES, "CMSG_TAXICLEARALLNODES" },
	{ CMSG_TAXIENABLEALLNODES, "CMSG_TAXIENABLEALLNODES" },
	{ CMSG_TAXISHOWNODES, "CMSG_TAXISHOWNODES" },
	{ SMSG_SHOWTAXINODES, "SMSG_SHOWTAXINODES" },
	{ CMSG_TAXINODE_STATUS_QUERY, "CMSG_TAXINODE_STATUS_QUERY" },
	{ SMSG_TAXINODE_STATUS, "SMSG_TAXINODE_STATUS" },
	{ CMSG_TAXIQUERYAVAILABLENODES, "CMSG_TAXIQUERYAVAILABLENODES" },
	{ CMSG_ACTIVATETAXI, "CMSG_ACTIVATETAXI" },
	{ SMSG_ACTIVATETAXIREPLY, "SMSG_ACTIVATETAXIREPLY" },
	{ SMSG_NEW_TAXI_PATH, "SMSG_NEW_TAXI_PATH" },
	{ CMSG_TRAINER_LIST, "CMSG_TRAINER_LIST" },
	{ SMSG_TRAINER_LIST, "SMSG_TRAINER_LIST" },
	{ CMSG_TRAINER_BUY_SPELL, "CMSG_TRAINER_BUY_SPELL" },
	{ SMSG_TRAINER_BUY_SUCCEEDED, "SMSG_TRAINER_BUY_SUCCEEDED" },
	{ SMSG_TRAINER_BUY_FAILED, "SMSG_TRAINER_BUY_FAILED" },
	{ CMSG_BINDER_ACTIVATE, "CMSG_BINDER_ACTIVATE" },
	{ SMSG_PLAYERBINDERROR, "SMSG_PLAYERBINDERROR" },
	{ CMSG_BANKER_ACTIVATE, "CMSG_BANKER_ACTIVATE" },
	{ SMSG_SHOW_BANK, "SMSG_SHOW_BANK" },
	{ CMSG_BUY_BANK_SLOT, "CMSG_BUY_BANK_SLOT" },
	{ SMSG_BUY_BANK_SLOT_RESULT, "SMSG_BUY_BANK_SLOT_RESULT" },
	{ CMSG_PETITION_SHOWLIST, "CMSG_PETITION_SHOWLIST" },
	{ SMSG_PETITION_SHOWLIST, "SMSG_PETITION_SHOWLIST" },
	{ CMSG_PETITION_BUY, "CMSG_PETITION_BUY" },
	{ CMSG_PETITION_SHOW_SIGNATURES, "CMSG_PETITION_SHOW_SIGNATURES" },
	{ SMSG_PETITION_SHOW_SIGNATURES, "SMSG_PETITION_SHOW_SIGNATURES" },
	{ CMSG_PETITION_SIGN, "CMSG_PETITION_SIGN" },
	{ SMSG_PETITION_SIGN_RESULTS, "SMSG_PETITION_SIGN_RESULTS" },
	{ MSG_PETITION_DECLINE, "MSG_PETITION_DECLINE" },
	{ CMSG_OFFER_PETITION, "CMSG_OFFER_PETITION" },
	{ CMSG_TURN_IN_PETITION, "CMSG_TURN_IN_PETITION" },
	{ SMSG_TURN_IN_PETITION_RESULTS, "SMSG_TURN_IN_PETITION_RESULTS" },
	{ CMSG_PETITION_QUERY, "CMSG_PETITION_QUERY" },
	{ SMSG_PETITION_QUERY_RESPONSE, "SMSG_PETITION_QUERY_RESPONSE" },
	{ SMSG_FISH_NOT_HOOKED, "SMSG_FISH_NOT_HOOKED" },
	{ SMSG_FISH_ESCAPED, "SMSG_FISH_ESCAPED" },
	{ CMSG_BUG, "CMSG_BUG" },
	{ SMSG_NOTIFICATION, "SMSG_NOTIFICATION" },
	{ CMSG_PLAYED_TIME, "CMSG_PLAYED_TIME" },
	{ SMSG_PLAYED_TIME, "SMSG_PLAYED_TIME" },
	{ CMSG_QUERY_TIME, "CMSG_QUERY_TIME" },
	{ SMSG_QUERY_TIME_RESPONSE, "SMSG_QUERY_TIME_RESPONSE" },
	{ SMSG_LOG_XPGAIN, "SMSG_LOG_XPGAIN" },
	{ MSG_SPLIT_MONEY, "MSG_SPLIT_MONEY" },
	{ CMSG_RECLAIM_CORPSE, "CMSG_RECLAIM_CORPSE" },
	{ CMSG_WRAP_ITEM, "CMSG_WRAP_ITEM" },
	{ SMSG_LEVELUP_INFO, "SMSG_LEVELUP_INFO" },
	{ MSG_MINIMAP_PING, "MSG_MINIMAP_PING" },
	{ SMSG_RESISTLOG, "SMSG_RESISTLOG" },
	{ SMSG_ENCHANTMENTLOG, "SMSG_ENCHANTMENTLOG" },
	{ CMSG_SET_SKILL_CHEAT, "CMSG_SET_SKILL_CHEAT" },
	{ SMSG_START_MIRROR_TIMER, "SMSG_START_MIRROR_TIMER" },
	{ SMSG_PAUSE_MIRROR_TIMER, "SMSG_PAUSE_MIRROR_TIMER" },
	{ SMSG_STOP_MIRROR_TIMER, "SMSG_STOP_MIRROR_TIMER" },
	{ CMSG_PING, "CMSG_PING" },
	{ SMSG_PONG, "SMSG_PONG" },
	{ SMSG_CLEAR_COOLDOWN, "SMSG_CLEAR_COOLDOWN" },
	{ SMSG_GAMEOBJECT_PAGETEXT, "SMSG_GAMEOBJECT_PAGETEXT" },
	{ CMSG_SETSHEATHED, "CMSG_SETSHEATHED" },
	{ SMSG_COOLDOWN_CHEAT, "SMSG_COOLDOWN_CHEAT" },
	{ SMSG_SPELL_DELAYED, "SMSG_SPELL_DELAYED" },
	{ CMSG_PLAYER_MACRO, "CMSG_PLAYER_MACRO" },
	{ SMSG_PLAYER_MACRO, "SMSG_PLAYER_MACRO" },
	{ CMSG_GHOST, "CMSG_GHOST" },
	{ CMSG_GM_INVIS, "CMSG_GM_INVIS" },
	{ CMSG_SCREENSHOT, "CMSG_SCREENSHOT" },
	{ MSG_GM_BIND_OTHER, "MSG_GM_BIND_OTHER" },
	{ MSG_GM_SUMMON, "MSG_GM_SUMMON" },
	{ SMSG_ITEM_TIME_UPDATE, "SMSG_ITEM_TIME_UPDATE" },
	{ SMSG_ITEM_ENCHANT_TIME_UPDATE, "SMSG_ITEM_ENCHANT_TIME_UPDATE" },
	{ SMSG_AUTH_CHALLENGE, "SMSG_AUTH_CHALLENGE" },
	{ CMSG_AUTH_SESSION, "CMSG_AUTH_SESSION" },
	{ SMSG_AUTH_RESPONSE, "SMSG_AUTH_RESPONSE" },
	{ MSG_GM_SHOWLABEL, "MSG_GM_SHOWLABEL" },
	{ MSG_ADD_DYNAMIC_TARGET, "MSG_ADD_DYNAMIC_TARGET" },
	{ MSG_SAVE_GUILD_EMBLEM, "MSG_SAVE_GUILD_EMBLEM" },
	{ MSG_TABARDVENDOR_ACTIVATE, "MSG_TABARDVENDOR_ACTIVATE" },
	{ SMSG_PLAY_SPELL_VISUAL, "SMSG_PLAY_SPELL_VISUAL" },
	{ CMSG_ZONEUPDATE, "CMSG_ZONEUPDATE" },
	{ SMSG_PARTYKILLLOG, "SMSG_PARTYKILLLOG" },
	{ SMSG_COMPRESSED_UPDATE_OBJECT, "SMSG_COMPRESSED_UPDATE_OBJECT" },
	{ SMSG_OBSOLETE, "SMSG_OBSOLETE" },
	{ SMSG_EXPLORATION_EXPERIENCE, "SMSG_EXPLORATION_EXPERIENCE" },
	{ CMSG_GM_SET_SECURITY_GROUP, "CMSG_GM_SET_SECURITY_GROUP" },
	{ CMSG_GM_NUKE, "CMSG_GM_NUKE" },
	{ MSG_RANDOM_ROLL, "MSG_RANDOM_ROLL" },
	{ SMSG_ENVIRONMENTALDAMAGELOG, "SMSG_ENVIRONMENTALDAMAGELOG" },
	{ CMSG_RWHOIS, "CMSG_RWHOIS" },
	{ SMSG_RWHOIS, "SMSG_RWHOIS" },
	{ MSG_LOOKING_FOR_GROUP, "MSG_LOOKING_FOR_GROUP" },
	{ CMSG_SET_LOOKING_FOR_GROUP, "CMSG_SET_LOOKING_FOR_GROUP" },
	{ CMSG_UNLEARN_SPELL, "CMSG_UNLEARN_SPELL" },
	{ CMSG_UNLEARN_SKILL, "CMSG_UNLEARN_SKILL" },
	{ SMSG_REMOVED_SPELL, "SMSG_REMOVED_SPELL" },
	{ CMSG_DECHARGE, "CMSG_DECHARGE" },
	{ CMSG_GMTICKET_CREATE, "CMSG_GMTICKET_CREATE" },
	{ SMSG_GMTICKET_CREATE, "SMSG_GMTICKET_CREATE" },
	{ CMSG_GMTICKET_UPDATETEXT, "CMSG_GMTICKET_UPDATETEXT" },
	{ SMSG_GMTICKET_UPDATETEXT, "SMSG_GMTICKET_UPDATETEXT" },
	{ SMSG_ACCOUNT_DATA_MD5, "SMSG_ACCOUNT_DATA_MD5" },
	{ CMSG_REQUEST_ACCOUNT_DATA, "CMSG_REQUEST_ACCOUNT_DATA" },
	{ CMSG_UPDATE_ACCOUNT_DATA, "CMSG_UPDATE_ACCOUNT_DATA" },
	{ SMSG_UPDATE_ACCOUNT_DATA, "SMSG_UPDATE_ACCOUNT_DATA" },
	{ SMSG_CLEAR_FAR_SIGHT_IMMEDIATE, "SMSG_CLEAR_FAR_SIGHT_IMMEDIATE" },
	{ SMSG_POWERGAINLOG_OBSOLETE, "SMSG_POWERGAINLOG_OBSOLETE" },
	{ CMSG_GM_TEACH, "CMSG_GM_TEACH" },
	{ CMSG_GM_CREATE_ITEM_TARGET, "CMSG_GM_CREATE_ITEM_TARGET" },
	{ CMSG_GMTICKET_GETTICKET, "CMSG_GMTICKET_GETTICKET" },
	{ SMSG_GMTICKET_GETTICKET, "SMSG_GMTICKET_GETTICKET" },
	{ CMSG_UNLEARN_TALENTS, "CMSG_UNLEARN_TALENTS" },
	{ SMSG_GAMEOBJECT_SPAWN_ANIM, "SMSG_GAMEOBJECT_SPAWN_ANIM" },
	{ SMSG_GAMEOBJECT_DESPAWN_ANIM, "SMSG_GAMEOBJECT_DESPAWN_ANIM" },
	{ MSG_CORPSE_QUERY, "MSG_CORPSE_QUERY" },
	{ CMSG_GMTICKET_DELETETICKET, "CMSG_GMTICKET_DELETETICKET" },
	{ SMSG_GMTICKET_DELETETICKET, "SMSG_GMTICKET_DELETETICKET" },
	{ SMSG_CHAT_WRONG_FACTION, "SMSG_CHAT_WRONG_FACTION" },
	{ CMSG_GMTICKET_SYSTEMSTATUS, "CMSG_GMTICKET_SYSTEMSTATUS" },
	{ SMSG_GMTICKET_SYSTEMSTATUS, "SMSG_GMTICKET_SYSTEMSTATUS" },
	{ CMSG_SPIRIT_HEALER_ACTIVATE, "CMSG_SPIRIT_HEALER_ACTIVATE" },
	{ CMSG_SET_STAT_CHEAT, "CMSG_SET_STAT_CHEAT" },
	{ SMSG_SET_REST_START, "SMSG_SET_REST_START" },
	{ CMSG_SKILL_BUY_STEP, "CMSG_SKILL_BUY_STEP" },
	{ CMSG_SKILL_BUY_RANK, "CMSG_SKILL_BUY_RANK" },
	{ CMSG_XP_CHEAT, "CMSG_XP_CHEAT" },
	{ SMSG_SPIRIT_HEALER_CONFIRM, "SMSG_SPIRIT_HEALER_CONFIRM" },
	{ CMSG_CHARACTER_POINT_CHEAT, "CMSG_CHARACTER_POINT_CHEAT" },
	{ SMSG_GOSSIP_POI, "SMSG_GOSSIP_POI" },
	{ CMSG_CHAT_IGNORED, "CMSG_CHAT_IGNORED" },
	{ CMSG_GM_VISION, "CMSG_GM_VISION" },
	{ CMSG_SERVER_COMMAND, "CMSG_SERVER_COMMAND" },
	{ CMSG_GM_SILENCE, "CMSG_GM_SILENCE" },
	{ CMSG_GM_REVEALTO, "CMSG_GM_REVEALTO" },
	{ CMSG_GM_RESURRECT, "CMSG_GM_RESURRECT" },
	{ CMSG_GM_SUMMONMOB, "CMSG_GM_SUMMONMOB" },
	{ CMSG_GM_MOVECORPSE, "CMSG_GM_MOVECORPSE" },
	{ CMSG_GM_FREEZE, "CMSG_GM_FREEZE" },
	{ CMSG_GM_UBERINVIS, "CMSG_GM_UBERINVIS" },
	{ CMSG_GM_REQUEST_PLAYER_INFO, "CMSG_GM_REQUEST_PLAYER_INFO" },
	{ SMSG_GM_PLAYER_INFO, "SMSG_GM_PLAYER_INFO" },
	{ CMSG_GUILD_RANK, "CMSG_GUILD_RANK" },
	{ CMSG_GUILD_ADD_RANK, "CMSG_GUILD_ADD_RANK" },
	{ CMSG_GUILD_DEL_RANK, "CMSG_GUILD_DEL_RANK" },
	{ CMSG_GUILD_SET_PUBLIC_NOTE, "CMSG_GUILD_SET_PUBLIC_NOTE" },
	{ CMSG_GUILD_SET_OFFICER_NOTE, "CMSG_GUILD_SET_OFFICER_NOTE" },
	{ SMSG_LOGIN_VERIFY_WORLD, "SMSG_LOGIN_VERIFY_WORLD" },
	{ CMSG_CLEAR_EXPLORATION, "CMSG_CLEAR_EXPLORATION" },
	{ CMSG_SEND_MAIL, "CMSG_SEND_MAIL" },
	{ SMSG_SEND_MAIL_RESULT, "SMSG_SEND_MAIL_RESULT" },
	{ CMSG_GET_MAIL_LIST, "CMSG_GET_MAIL_LIST" },
	{ SMSG_MAIL_LIST_RESULT, "SMSG_MAIL_LIST_RESULT" },
	{ CMSG_BATTLEFIELD_LIST, "CMSG_BATTLEFIELD_LIST" },
	{ SMSG_BATTLEFIELD_LIST, "SMSG_BATTLEFIELD_LIST" },
	{ CMSG_BATTLEFIELD_JOIN, "CMSG_BATTLEFIELD_JOIN" },
	{ SMSG_BATTLEFIELD_WIN, "SMSG_BATTLEFIELD_WIN" },
	{ SMSG_BATTLEFIELD_LOSE, "SMSG_BATTLEFIELD_LOSE" },
	{ CMSG_TAXICLEARNODE, "CMSG_TAXICLEARNODE" },
	{ CMSG_TAXIENABLENODE, "CMSG_TAXIENABLENODE" },
	{ CMSG_ITEM_TEXT_QUERY, "CMSG_ITEM_TEXT_QUERY" },
	{ SMSG_ITEM_TEXT_QUERY_RESPONSE, "SMSG_ITEM_TEXT_QUERY_RESPONSE" },
	{ CMSG_MAIL_TAKE_MONEY, "CMSG_MAIL_TAKE_MONEY" },
	{ CMSG_MAIL_TAKE_ITEM, "CMSG_MAIL_TAKE_ITEM" },
	{ CMSG_MAIL_MARK_AS_READ, "CMSG_MAIL_MARK_AS_READ" },
	{ CMSG_MAIL_RETURN_TO_SENDER, "CMSG_MAIL_RETURN_TO_SENDER" },
	{ CMSG_MAIL_DELETE, "CMSG_MAIL_DELETE" },
	{ CMSG_MAIL_CREATE_TEXT_ITEM, "CMSG_MAIL_CREATE_TEXT_ITEM" },
	{ SMSG_SPELLLOGMISS, "SMSG_SPELLLOGMISS" },
	{ SMSG_SPELLLOGEXECUTE, "SMSG_SPELLLOGEXECUTE" },
	{ SMSG_DEBUGAURAPROC, "SMSG_DEBUGAURAPROC" },
	{ SMSG_PERIODICAURALOG, "SMSG_PERIODICAURALOG" },
	{ SMSG_SPELLDAMAGESHIELD, "SMSG_SPELLDAMAGESHIELD" },
	{ SMSG_SPELLNONMELEEDAMAGELOG, "SMSG_SPELLNONMELEEDAMAGELOG" },
	{ CMSG_LEARN_TALENT, "CMSG_LEARN_TALENT" },
	{ SMSG_RESURRECT_FAILED, "SMSG_RESURRECT_FAILED" },
	{ CMSG_ENABLE_PVP, "CMSG_ENABLE_PVP" },
	{ SMSG_ZONE_UNDER_ATTACK, "SMSG_ZONE_UNDER_ATTACK" },
	{ MSG_AUCTION_HELLO, "MSG_AUCTION_HELLO" },
	{ CMSG_AUCTION_SELL_ITEM, "CMSG_AUCTION_SELL_ITEM" },
	{ CMSG_AUCTION_REMOVE_ITEM, "CMSG_AUCTION_REMOVE_ITEM" },
	{ CMSG_AUCTION_LIST_ITEMS, "CMSG_AUCTION_LIST_ITEMS" },
	{ CMSG_AUCTION_LIST_OWNER_ITEMS, "CMSG_AUCTION_LIST_OWNER_ITEMS" },
	{ CMSG_AUCTION_PLACE_BID, "CMSG_AUCTION_PLACE_BID" },
	{ SMSG_AUCTION_COMMAND_RESULT, "SMSG_AUCTION_COMMAND_RESULT" },
	{ SMSG_AUCTION_LIST_RESULT, "SMSG_AUCTION_LIST_RESULT" },
	{ SMSG_AUCTION_OWNER_LIST_RESULT, "SMSG_AUCTION_OWNER_LIST_RESULT" },
	{ SMSG_AUCTION_BIDDER_NOTIFICATION, "SMSG_AUCTION_BIDDER_NOTIFICATION" },
	{ SMSG_AUCTION_OWNER_NOTIFICATION, "SMSG_AUCTION_OWNER_NOTIFICATION" },
	{ SMSG_PROCRESIST, "SMSG_PROCRESIST" },
	{ SMSG_STANDSTATE_CHANGE_FAILURE, "SMSG_STANDSTATE_CHANGE_FAILURE" },
	{ SMSG_DISPEL_FAILED, "SMSG_DISPEL_FAILED" },
	{ SMSG_SPELLORDAMAGE_IMMUNE, "SMSG_SPELLORDAMAGE_IMMUNE" },
	{ CMSG_AUCTION_LIST_BIDDER_ITEMS, "CMSG_AUCTION_LIST_BIDDER_ITEMS" },
	{ SMSG_AUCTION_BIDDER_LIST_RESULT, "SMSG_AUCTION_BIDDER_LIST_RESULT" },
	{ SMSG_SET_FLAT_SPELL_MODIFIER, "SMSG_SET_FLAT_SPELL_MODIFIER" },
	{ SMSG_SET_PCT_SPELL_MODIFIER, "SMSG_SET_PCT_SPELL_MODIFIER" },
	{ CMSG_SET_AMMO, "CMSG_SET_AMMO" },
	{ SMSG_CORPSE_RECLAIM_DELAY, "SMSG_CORPSE_RECLAIM_DELAY" },
	{ CMSG_SET_ACTIVE_MOVER, "CMSG_SET_ACTIVE_MOVER" },
	{ CMSG_PET_CANCEL_AURA, "CMSG_PET_CANCEL_AURA" },
	{ CMSG_PLAYER_AI_CHEAT, "CMSG_PLAYER_AI_CHEAT" },
	{ CMSG_CANCEL_AUTO_REPEAT_SPELL, "CMSG_CANCEL_AUTO_REPEAT_SPELL" },
	{ MSG_GM_ACCOUNT_ONLINE, "MSG_GM_ACCOUNT_ONLINE" },
	{ MSG_LIST_STABLED_PETS, "MSG_LIST_STABLED_PETS" },
	{ CMSG_STABLE_PET, "CMSG_STABLE_PET" },
	{ CMSG_UNSTABLE_PET, "CMSG_UNSTABLE_PET" },
	{ CMSG_BUY_STABLE_SLOT, "CMSG_BUY_STABLE_SLOT" },
	{ SMSG_STABLE_RESULT, "SMSG_STABLE_RESULT" },
	{ CMSG_STABLE_REVIVE_PET, "CMSG_STABLE_REVIVE_PET" },
	{ CMSG_STABLE_SWAP_PET, "CMSG_STABLE_SWAP_PET" },
	{ MSG_QUEST_PUSH_RESULT, "MSG_QUEST_PUSH_RESULT" },
	{ SMSG_PLAY_MUSIC, "SMSG_PLAY_MUSIC" },
	{ SMSG_PLAY_OBJECT_SOUND, "SMSG_PLAY_OBJECT_SOUND" },
	{ CMSG_REQUEST_PET_INFO, "CMSG_REQUEST_PET_INFO" },
	{ CMSG_FAR_SIGHT, "CMSG_FAR_SIGHT" },
	{ SMSG_SPELLDISPELLOG, "SMSG_SPELLDISPELLOG" },
	{ SMSG_DAMAGE_CALC_LOG, "SMSG_DAMAGE_CALC_LOG" },
	{ CMSG_ENABLE_DAMAGE_LOG, "CMSG_ENABLE_DAMAGE_LOG" },
	{ CMSG_GROUP_CHANGE_SUB_GROUP, "CMSG_GROUP_CHANGE_SUB_GROUP" },
	{ SMSG_RAID_MEMBER_STATS, "SMSG_RAID_MEMBER_STATS" },
	{ CMSG_GROUP_SWAP_SUB_GROUP, "CMSG_GROUP_SWAP_SUB_GROUP" },
	{ CMSG_RESET_FACTION_CHEAT, "CMSG_RESET_FACTION_CHEAT" },
	{ CMSG_AUTOSTORE_BANK_ITEM, "CMSG_AUTOSTORE_BANK_ITEM" },
	{ CMSG_AUTOBANK_ITEM, "CMSG_AUTOBANK_ITEM" },
	{ MSG_QUERY_NEXT_MAIL_TIME, "MSG_QUERY_NEXT_MAIL_TIME" },
	{ SMSG_RECEIVED_MAIL, "SMSG_RECEIVED_MAIL" },
	{ SMSG_RAID_GROUP_ONLY, "SMSG_RAID_GROUP_ONLY" },
	{ CMSG_SET_DURABILITY_CHEAT, "CMSG_SET_DURABILITY_CHEAT" },
	{ CMSG_SET_PVP_RANK_CHEAT, "CMSG_SET_PVP_RANK_CHEAT" },
	{ CMSG_ADD_PVP_MEDAL_CHEAT, "CMSG_ADD_PVP_MEDAL_CHEAT" },
	{ CMSG_DEL_PVP_MEDAL_CHEAT, "CMSG_DEL_PVP_MEDAL_CHEAT" },
	{ CMSG_SET_PVP_TITLE, "CMSG_SET_PVP_TITLE" },
	{ SMSG_PVP_CREDIT, "SMSG_PVP_CREDIT" },
	{ SMSG_AUCTION_REMOVED_NOTIFICATION, "SMSG_AUCTION_REMOVED_NOTIFICATION" },
	{ CMSG_GROUP_RAID_CONVERT, "CMSG_GROUP_RAID_CONVERT" },
	{ CMSG_GROUP_ASSISTANT_LEADER, "CMSG_GROUP_ASSISTANT_LEADER" },
	{ CMSG_BUYBACK_ITEM, "CMSG_BUYBACK_ITEM" },
	{ SMSG_SERVER_MESSAGE, "SMSG_SERVER_MESSAGE" },
	{ CMSG_GMTICKETSYSTEM_TOGGLE, "CMSG_GMTICKETSYSTEM_TOGGLE" },
	{ CMSG_CANCEL_GROWTH_AURA, "CMSG_CANCEL_GROWTH_AURA" },
	{ SMSG_CANCEL_AUTO_REPEAT, "SMSG_CANCEL_AUTO_REPEAT" },
	{ SMSG_STANDSTATE_CHANGE_ACK, "SMSG_STANDSTATE_CHANGE_ACK" },
	{ SMSG_LOOT_ALL_PASSED, "SMSG_LOOT_ALL_PASSED" },
	{ SMSG_LOOT_ROLL_WON, "SMSG_LOOT_ROLL_WON" },
	{ CMSG_LOOT_ROLL, "CMSG_LOOT_ROLL" },
	{ SMSG_LOOT_START_ROLL, "SMSG_LOOT_START_ROLL" },
	{ SMSG_LOOT_ROLL, "SMSG_LOOT_ROLL" },
	{ CMSG_LOOT_MASTER_GIVE, "CMSG_LOOT_MASTER_GIVE" },
	{ SMSG_LOOT_MASTER_LIST, "SMSG_LOOT_MASTER_LIST" },
	{ SMSG_SET_FORCED_REACTIONS, "SMSG_SET_FORCED_REACTIONS" },
	{ SMSG_SPELL_FAILED_OTHER, "SMSG_SPELL_FAILED_OTHER" },
	{ SMSG_GAMEOBJECT_RESET_STATE, "SMSG_GAMEOBJECT_RESET_STATE" },
	{ CMSG_REPAIR_ITEM, "CMSG_REPAIR_ITEM" },
	{ SMSG_CHAT_PLAYER_NOT_FOUND, "SMSG_CHAT_PLAYER_NOT_FOUND" },
	{ MSG_TALENT_WIPE_CONFIRM, "MSG_TALENT_WIPE_CONFIRM" },
	{ SMSG_SUMMON_REQUEST, "SMSG_SUMMON_REQUEST" },
	{ CMSG_SUMMON_RESPONSE, "CMSG_SUMMON_RESPONSE" },
	{ MSG_MOVE_TOGGLE_GRAVITY_CHEAT, "MSG_MOVE_TOGGLE_GRAVITY_CHEAT" },
	{ SMSG_MONSTER_MOVE_TRANSPORT, "SMSG_MONSTER_MOVE_TRANSPORT" },
	{ SMSG_PET_BROKEN, "SMSG_PET_BROKEN" },
	{ MSG_MOVE_FEATHER_FALL, "MSG_MOVE_FEATHER_FALL" },
	{ MSG_MOVE_WATER_WALK, "MSG_MOVE_WATER_WALK" },
	{ CMSG_SERVER_BROADCAST, "CMSG_SERVER_BROADCAST" },
	{ CMSG_SELF_RES, "CMSG_SELF_RES" },
	{ SMSG_FEIGN_DEATH_RESISTED, "SMSG_FEIGN_DEATH_RESISTED" },
	{ CMSG_RUN_SCRIPT, "CMSG_RUN_SCRIPT" },
	{ SMSG_SCRIPT_MESSAGE, "SMSG_SCRIPT_MESSAGE" },
	{ NUM_MSG_TYPES, "NUM_MSG_TYPES" },
	{ RLMSG_AUTH_SSHASH, "RLMSG_AUTH_SSHASH" },
};

const char *GetPacketName (uint Opcode)
{
    for (uint i = 0; i < ARRAY_LEN (PacketNames); i++)
        if (PacketNames [i].Opcode == Opcode)
            return PacketNames [i].Name;
    return NULL;
}
CMSG_CHAR_CREATE_t::~CMSG_CHAR_CREATE_t ()
{
	delete [] Name;
}

CMSG_CHAR_CREATE_t *CMSG_CHAR_CREATE_t::Create (Socket *socket)
{
    CMSG_CHAR_CREATE_t *This = new CMSG_CHAR_CREATE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_CHAR_CREATE_t::Parse (Socket *socket)
{
	if (!(Name = socket->GetCStr ())) return false;
	if (!socket->Get (Race)) return false;
	if (!socket->Get (Class)) return false;
	if (!socket->Get (Gender)) return false;
	if (!socket->Get (Skin)) return false;
	if (!socket->Get (Face)) return false;
	if (!socket->Get (HairStyle)) return false;
	if (!socket->Get (HairColor)) return false;
	if (!socket->Get (FacialHair)) return false;
	if (!socket->Get (OutfitId)) return false;
    return true;
}

CMSG_CHAR_DELETE_t *CMSG_CHAR_DELETE_t::Create (Socket *socket)
{
    CMSG_CHAR_DELETE_t *This = new CMSG_CHAR_DELETE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_CHAR_DELETE_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_CHAR_CREATE_t *SMSG_CHAR_CREATE_t::Create ()
{
    SMSG_CHAR_CREATE_t *This = new SMSG_CHAR_CREATE_t;
    return This;
}

void SMSG_CHAR_CREATE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_CHAR_CREATE); cur += sizeof (uint16);
	*cur = ErrorCode; cur += sizeof (uint8);
}

SMSG_CHAR_ENUM_t *SMSG_CHAR_ENUM_t::Create ()
{
    SMSG_CHAR_ENUM_t *This = new SMSG_CHAR_ENUM_t;
    return This;
}

void SMSG_CHAR_ENUM_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + 0;
	for (int i1 = 0; i1 < List.Length (); i1++)
		length += sizeof (uint64) + strlen (List [i1]->Name) + 1 + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint8) + sizeof (uint32) + sizeof (uint32) + sizeof (float) + sizeof (float) + sizeof (float) + sizeof (uint32) + sizeof (uint32) + sizeof (uint8) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + List [i1]->SlotItems.Length () * (sizeof (uint32) + sizeof (uint8));
	length += 0;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_CHAR_ENUM); cur += sizeof (uint16);
	*cur = Count; cur += sizeof (uint8);
	for (int i1 = 0; i1 < List.Length(); i1++)
	{
		PUT_LE64 (cur, List [i1]->GUID); cur += sizeof (uint64);
		{
		    size_t _sl = strlen (List [i1]->Name);
		    memcpy (cur, List [i1]->Name, _sl + 1);
		    cur += _sl + 1;
		}
		*cur = List [i1]->Race; cur += sizeof (uint8);
		*cur = List [i1]->Class; cur += sizeof (uint8);
		*cur = List [i1]->Gender; cur += sizeof (uint8);
		*cur = List [i1]->Skin; cur += sizeof (uint8);
		*cur = List [i1]->Face; cur += sizeof (uint8);
		*cur = List [i1]->HairStyle; cur += sizeof (uint8);
		*cur = List [i1]->HairColor; cur += sizeof (uint8);
		*cur = List [i1]->FacialHair; cur += sizeof (uint8);
		*cur = List [i1]->Level; cur += sizeof (uint8);
		PUT_LE32 (cur, List [i1]->ZoneId); cur += sizeof (uint32);
		PUT_LE32 (cur, List [i1]->MapId); cur += sizeof (uint32);
		PUT_LEF32 (cur, List [i1]->PositionX); cur += sizeof (float);
		PUT_LEF32 (cur, List [i1]->PositionY); cur += sizeof (float);
		PUT_LEF32 (cur, List [i1]->PositionZ); cur += sizeof (float);
		PUT_LE32 (cur, 0); cur += sizeof (uint32);
		PUT_LE32 (cur, 64); cur += sizeof (uint32);
		*cur = 1; cur += sizeof (uint8);
		PUT_LE32 (cur, List [i1]->PetInfoId); cur += sizeof (uint32);
		PUT_LE32 (cur, List [i1]->PetLevel); cur += sizeof (uint32);
		PUT_LE32 (cur, List [i1]->PetFamilyId); cur += sizeof (uint32);
		for (int i2 = 0; i2 < List [i1]->SlotItems.Length(); i2++)
		{
			PUT_LE32 (cur, List [i1]->SlotItems [i2]->DisplayId); cur += sizeof (uint32);
			*cur = List [i1]->SlotItems [i2]->InventoryType; cur += sizeof (uint8);
		}

	}

}

CMSG_PLAYER_LOGIN_t *CMSG_PLAYER_LOGIN_t::Create (Socket *socket)
{
    CMSG_PLAYER_LOGIN_t *This = new CMSG_PLAYER_LOGIN_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_PLAYER_LOGIN_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_NEW_WORLD_t *SMSG_NEW_WORLD_t::Create ()
{
    SMSG_NEW_WORLD_t *This = new SMSG_NEW_WORLD_t;
    return This;
}

void SMSG_NEW_WORLD_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (float) + sizeof (float) + sizeof (float) + sizeof (float);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_NEW_WORLD); cur += sizeof (uint16);
	PUT_LE32 (cur, Mapid); cur += sizeof (uint32);
	PUT_LEF32 (cur, X); cur += sizeof (float);
	PUT_LEF32 (cur, Y); cur += sizeof (float);
	PUT_LEF32 (cur, Z); cur += sizeof (float);
	PUT_LEF32 (cur, O); cur += sizeof (float);
}

SMSG_TRANSFER_PENDING_t *SMSG_TRANSFER_PENDING_t::Create ()
{
    SMSG_TRANSFER_PENDING_t *This = new SMSG_TRANSFER_PENDING_t;
    return This;
}

void SMSG_TRANSFER_PENDING_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_TRANSFER_PENDING); cur += sizeof (uint16);
	PUT_LE32 (cur, Type); cur += sizeof (uint32);
}

SMSG_CHARACTER_LOGIN_FAILED_t *SMSG_CHARACTER_LOGIN_FAILED_t::Create ()
{
    SMSG_CHARACTER_LOGIN_FAILED_t *This = new SMSG_CHARACTER_LOGIN_FAILED_t;
    return This;
}

void SMSG_CHARACTER_LOGIN_FAILED_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_CHARACTER_LOGIN_FAILED); cur += sizeof (uint16);
	PUT_LE32 (cur, ErrorCode); cur += sizeof (uint32);
}

SMSG_LOGIN_SETTIMESPEED_t *SMSG_LOGIN_SETTIMESPEED_t::Create ()
{
    SMSG_LOGIN_SETTIMESPEED_t *This = new SMSG_LOGIN_SETTIMESPEED_t;
    return This;
}

void SMSG_LOGIN_SETTIMESPEED_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (float);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_LOGIN_SETTIMESPEED); cur += sizeof (uint16);
	PUT_LE32 (cur, Time); cur += sizeof (uint32);
	PUT_LEF32 (cur, Speed); cur += sizeof (float);
}

SMSG_LOGOUT_RESPONSE_t *SMSG_LOGOUT_RESPONSE_t::Create ()
{
    SMSG_LOGOUT_RESPONSE_t *This = new SMSG_LOGOUT_RESPONSE_t;
    return This;
}

void SMSG_LOGOUT_RESPONSE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_LOGOUT_RESPONSE); cur += sizeof (uint16);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
	*cur = Ok; cur += sizeof (uint8);
}

CMSG_NAME_QUERY_t *CMSG_NAME_QUERY_t::Create (Socket *socket)
{
    CMSG_NAME_QUERY_t *This = new CMSG_NAME_QUERY_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_NAME_QUERY_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_FRIEND_LIST_t *SMSG_FRIEND_LIST_t::Create ()
{
    SMSG_FRIEND_LIST_t *This = new SMSG_FRIEND_LIST_t;
    return This;
}

void SMSG_FRIEND_LIST_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + 0;
	for (int i1 = 0; i1 < Friends.Length (); i1++)
		length += sizeof (uint64) + sizeof (uint8) + ((Friends [i1]->Status != 0) ? (sizeof (uint32) + sizeof (uint32) + sizeof (uint32)) : 0);
	length += 0;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_FRIEND_LIST); cur += sizeof (uint16);
	*cur = Count; cur += sizeof (uint8);
	for (int i1 = 0; i1 < Friends.Length(); i1++)
	{
		PUT_LE64 (cur, Friends [i1]->PlayerGUID); cur += sizeof (uint64);
		*cur = Friends [i1]->Status; cur += sizeof (uint8);
		if (Friends [i1]->Status != 0)
		{
			PUT_LE32 (cur, Friends [i1]->Area); cur += sizeof (uint32);
			PUT_LE32 (cur, Friends [i1]->Level); cur += sizeof (uint32);
			PUT_LE32 (cur, Friends [i1]->Class); cur += sizeof (uint32);
		}

	}

}

SMSG_FRIEND_STATUS_t *SMSG_FRIEND_STATUS_t::Create ()
{
    SMSG_FRIEND_STATUS_t *This = new SMSG_FRIEND_STATUS_t;
    return This;
}

void SMSG_FRIEND_STATUS_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + sizeof (uint64) + ((Result == FRIEND_ADDED_ONLINE || Result == FRIEND_ONLINE || Result ==  FRIEND_OFFLINE) ? (sizeof (uint32) + sizeof (uint32) + sizeof (uint32)) : 0);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_FRIEND_STATUS); cur += sizeof (uint16);
	*cur = Result; cur += sizeof (uint8);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	if (Result == FRIEND_ADDED_ONLINE || Result == FRIEND_ONLINE || Result ==  FRIEND_OFFLINE)
	{
		PUT_LE32 (cur, Area); cur += sizeof (uint32);
		PUT_LE32 (cur, Level); cur += sizeof (uint32);
		PUT_LE32 (cur, Class); cur += sizeof (uint32);
	}

}

CMSG_ADD_FRIEND_t::~CMSG_ADD_FRIEND_t ()
{
	delete [] Name;
}

CMSG_ADD_FRIEND_t *CMSG_ADD_FRIEND_t::Create (Socket *socket)
{
    CMSG_ADD_FRIEND_t *This = new CMSG_ADD_FRIEND_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_ADD_FRIEND_t::Parse (Socket *socket)
{
	if (!(Name = socket->GetCStr ())) return false;
    return true;
}

SMSG_GROUP_LIST_t *SMSG_GROUP_LIST_t::Create ()
{
    SMSG_GROUP_LIST_t *This = new SMSG_GROUP_LIST_t;
    return This;
}

void SMSG_GROUP_LIST_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + 1 + sizeof (uint8) + 1 + 0;
	for (int i1 = 0; i1 < Members.Length (); i1++)
		length += sizeof (uint8) + 1 + strlen (Members [i1]->Membername) + 1 + 1 + sizeof (uint32) + 1;
	length += 0 + sizeof (uint8) + 1 + sizeof (uint32) + 1 + sizeof (uint8) + sizeof (uint32) + 1 + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_GROUP_LIST); cur += sizeof (uint16);
	*cur = 0; cur += sizeof (uint8);
	*cur = Memberscount; cur += sizeof (uint8);
	*cur = 0; cur += sizeof (uint8);
	for (int i1 = 0; i1 < Members.Length(); i1++)
	{
		*cur = Members [i1]->Slotid; cur += sizeof (uint8);
		*cur = 0; cur += sizeof (uint8);
		{
		    size_t _sl = strlen (Members [i1]->Membername);
		    memcpy (cur, Members [i1]->Membername, _sl + 1);
		    cur += _sl + 1;
		}
		*cur = 0; cur += sizeof (uint8);
		PUT_LE32 (cur, Members [i1]->Guidsno); cur += sizeof (uint32);
		*cur = 0; cur += sizeof (uint8);
	}

	*cur = 1; cur += sizeof (uint8);
	*cur = 0; cur += sizeof (uint8);
	PUT_LE32 (cur, Leaderguid); cur += sizeof (uint32);
	*cur = 0; cur += sizeof (uint8);
	*cur = Lootmethord; cur += sizeof (uint8);
	PUT_LE32 (cur, Lootmaster); cur += sizeof (uint32);
	*cur = 0; cur += sizeof (uint8);
	*cur = Lootthreshold; cur += sizeof (uint8);
}

CMSG_MESSAGECHAT_t::~CMSG_MESSAGECHAT_t ()
{
		delete [] Whisperto;

		delete [] Channel;

	delete [] Msg;
}

CMSG_MESSAGECHAT_t *CMSG_MESSAGECHAT_t::Create (Socket *socket)
{
    CMSG_MESSAGECHAT_t *This = new CMSG_MESSAGECHAT_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_MESSAGECHAT_t::Parse (Socket *socket)
{
	if (!socket->Get (Type)) return false;
	if (!socket->GetLE (Language)) return false;
	if (!socket->GetLE (Guid)) return false;
	if (!socket->GetLE (Msglength)) return false;
	if (Type == CHAT_MSG_WHISPER)
	{
		if (!(Whisperto = socket->GetCStr ())) return false;
	}

	if (Type == CHAT_MSG_CHANNEL)
	{
		if (!(Channel = socket->GetCStr ())) return false;
	}

	if (!(Msg = socket->GetCStr ())) return false;
	if (!socket->Get (Afktoggle)) return false;
    return true;
}

SMSG_MESSAGECHAT_t *SMSG_MESSAGECHAT_t::Create ()
{
    SMSG_MESSAGECHAT_t *This = new SMSG_MESSAGECHAT_t;
    return This;
}

void SMSG_MESSAGECHAT_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + 4 + sizeof (uint64) + 3 + sizeof (uint32) + strlen (Msg) + 1 + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_MESSAGECHAT); cur += sizeof (uint16);
	*cur = Type; cur += sizeof (uint8);
	memset (cur, 0, sizeof (uint8)*4); cur += 4;
	PUT_LE64 (cur, Senderguid); cur += sizeof (uint64);
	memset (cur, 0, sizeof (uint8)*3); cur += 3;
	PUT_LE32 (cur, Msglength); cur += sizeof (uint32);
	{
	    size_t _sl = strlen (Msg);
	    memcpy (cur, Msg, _sl + 1);
	    cur += _sl + 1;
	}
	*cur = Afktoggle; cur += sizeof (uint8);
}

CMSG_JOIN_CHANNEL_t::~CMSG_JOIN_CHANNEL_t ()
{
	delete [] Name;
}

CMSG_JOIN_CHANNEL_t *CMSG_JOIN_CHANNEL_t::Create (Socket *socket)
{
    CMSG_JOIN_CHANNEL_t *This = new CMSG_JOIN_CHANNEL_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_JOIN_CHANNEL_t::Parse (Socket *socket)
{
	if (!(Name = socket->GetCStr ())) return false;
    return true;
}

SMSG_CHANNEL_NOTIFY_t *SMSG_CHANNEL_NOTIFY_t::Create ()
{
    SMSG_CHANNEL_NOTIFY_t *This = new SMSG_CHANNEL_NOTIFY_t;
    return This;
}

void SMSG_CHANNEL_NOTIFY_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + strlen (Channel) + 1 + sizeof (uint8) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_CHANNEL_NOTIFY); cur += sizeof (uint16);
	*cur = Unknown1; cur += sizeof (uint8);
	{
	    size_t _sl = strlen (Channel);
	    memcpy (cur, Channel, _sl + 1);
	    cur += _sl + 1;
	}
	*cur = Unknown2; cur += sizeof (uint8);
	PUT_LE32 (cur, Unknown3); cur += sizeof (uint32);
}

SMSG_UPDATE_OBJECT_t *SMSG_UPDATE_OBJECT_t::Create ()
{
    SMSG_UPDATE_OBJECT_t *This = new SMSG_UPDATE_OBJECT_t;
    return This;
}

void SMSG_UPDATE_OBJECT_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint8) + Values.Length () * (sizeof (uint8) + sizeof (uint64)) + Movement.Length () * (sizeof (uint8) + sizeof (uint64)) + CreateObject.Length () * (sizeof (uint8) + sizeof (uint64) + sizeof (uint8)) + ((OutOfRange.Length ()) ? (sizeof (uint8) + sizeof (uint32)) : 0) + OutOfRange.Length () * (sizeof (uint64));

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_UPDATE_OBJECT); cur += sizeof (uint16);
	PUT_LE32 (cur, Count); cur += sizeof (uint32);
	*cur = 0; cur += sizeof (uint8);
	for (int i1 = 0; i1 < Values.Length(); i1++)
	{
		*cur = UPDATE_VALUES; cur += sizeof (uint8);
		PUT_LE64 (cur, Values [i1]->GetGUID ()); cur += sizeof (uint64);
	}

	for (int i2 = 0; i2 < Movement.Length(); i2++)
	{
		*cur = UPDATE_MOVEMENT; cur += sizeof (uint8);
		PUT_LE64 (cur, Movement [i2]->GetGUID ()); cur += sizeof (uint64);
	}

	for (int i3 = 0; i3 < CreateObject.Length(); i3++)
	{
		*cur = UPDATE_CREATE_OBJECT; cur += sizeof (uint8);
		PUT_LE64 (cur, CreateObject [i3]->GetGUID ()); cur += sizeof (uint64);
		*cur = CreateObject [i3]->GetType (); cur += sizeof (uint8);
	}

	if (OutOfRange.Length ())
	{
		*cur = UPDATE_OUT_OF_RANGE_OBJECTS; cur += sizeof (uint8);
		PUT_LE32 (cur, OutOfRangeCount); cur += sizeof (uint32);
	}

	for (int i5 = 0; i5 < OutOfRange.Length(); i5++)
	{
		PUT_LE64 (cur, OutOfRange [i5]->GetGUID ()); cur += sizeof (uint64);
	}

}

SMSG_DESTROY_OBJECT_t *SMSG_DESTROY_OBJECT_t::Create ()
{
    SMSG_DESTROY_OBJECT_t *This = new SMSG_DESTROY_OBJECT_t;
    return This;
}

void SMSG_DESTROY_OBJECT_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_DESTROY_OBJECT); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
}

CMSG_AREATRIGGER_t *CMSG_AREATRIGGER_t::Create (Socket *socket)
{
    CMSG_AREATRIGGER_t *This = new CMSG_AREATRIGGER_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_AREATRIGGER_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Id)) return false;
    return true;
}

MSG_MOVE_HEARTBEAT_t *MSG_MOVE_HEARTBEAT_t::Create ()
{
    MSG_MOVE_HEARTBEAT_t *This = new MSG_MOVE_HEARTBEAT_t;
    return This;
}

void MSG_MOVE_HEARTBEAT_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint32) + sizeof (uint32) + sizeof (float) + sizeof (float) + sizeof (float) + sizeof (float);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, MSG_MOVE_HEARTBEAT); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	PUT_LE32 (cur, Flag); cur += sizeof (uint32);
	PUT_LE32 (cur, Unknown1); cur += sizeof (uint32);
	PUT_LEF32 (cur, X); cur += sizeof (float);
	PUT_LEF32 (cur, Y); cur += sizeof (float);
	PUT_LEF32 (cur, Z); cur += sizeof (float);
	PUT_LEF32 (cur, O); cur += sizeof (float);
}

SMSG_TRIGGER_CINEMATIC_t *SMSG_TRIGGER_CINEMATIC_t::Create ()
{
    SMSG_TRIGGER_CINEMATIC_t *This = new SMSG_TRIGGER_CINEMATIC_t;
    return This;
}

void SMSG_TRIGGER_CINEMATIC_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_TRIGGER_CINEMATIC); cur += sizeof (uint16);
	PUT_LE32 (cur, Video); cur += sizeof (uint32);
}

SMSG_TUTORIAL_FLAGS_t *SMSG_TUTORIAL_FLAGS_t::Create ()
{
    SMSG_TUTORIAL_FLAGS_t *This = new SMSG_TUTORIAL_FLAGS_t;
    return This;
}

void SMSG_TUTORIAL_FLAGS_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8)*32;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_TUTORIAL_FLAGS); cur += sizeof (uint16);
	memcpy (cur, TutMask, sizeof (TutMask)); cur += sizeof (TutMask);
}

CMSG_STANDSTATECHANGE_t *CMSG_STANDSTATECHANGE_t::Create (Socket *socket)
{
    CMSG_STANDSTATECHANGE_t *This = new CMSG_STANDSTATECHANGE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_STANDSTATECHANGE_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
	if (!socket->GetLE (State)) return false;
	if (!socket->Get (Animstate)) return false;
    return true;
}

SMSG_EMOTE_t *SMSG_EMOTE_t::Create ()
{
    SMSG_EMOTE_t *This = new SMSG_EMOTE_t;
    return This;
}

void SMSG_EMOTE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint64);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_EMOTE); cur += sizeof (uint16);
	PUT_LE32 (cur, Emote); cur += sizeof (uint32);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
}

CMSG_TEXT_EMOTE_t *CMSG_TEXT_EMOTE_t::Create (Socket *socket)
{
    CMSG_TEXT_EMOTE_t *This = new CMSG_TEXT_EMOTE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_TEXT_EMOTE_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Emote)) return false;
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_TEXT_EMOTE_t *SMSG_TEXT_EMOTE_t::Create ()
{
    SMSG_TEXT_EMOTE_t *This = new SMSG_TEXT_EMOTE_t;
    return This;
}

void SMSG_TEXT_EMOTE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint32) + 1 + strlen(Name) + 1;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_TEXT_EMOTE); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	PUT_LE32 (cur, Emote); cur += sizeof (uint32);
	{
	    uint32 _sl = strlen (Name);
	    PUT_LE32 (cur, _sl); cur += sizeof (uint32);
	    memcpy (cur, Name, _sl);
	    cur += _sl;
	}
	*cur = 0; cur += sizeof (uint8);
}

CMSG_AUTOSTORE_LOOT_ITEM_t *CMSG_AUTOSTORE_LOOT_ITEM_t::Create (Socket *socket)
{
    CMSG_AUTOSTORE_LOOT_ITEM_t *This = new CMSG_AUTOSTORE_LOOT_ITEM_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_AUTOSTORE_LOOT_ITEM_t::Parse (Socket *socket)
{
	if (!socket->Get (Lootslot)) return false;
    return true;
}

CMSG_SET_ACTION_BUTTON_t *CMSG_SET_ACTION_BUTTON_t::Create (Socket *socket)
{
    CMSG_SET_ACTION_BUTTON_t *This = new CMSG_SET_ACTION_BUTTON_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_SET_ACTION_BUTTON_t::Parse (Socket *socket)
{
	if (!socket->Get (Button)) return false;
	if (!socket->GetLE (Action)) return false;
    return true;
}

SMSG_ACTION_BUTTONS_t *SMSG_ACTION_BUTTONS_t::Create ()
{
    SMSG_ACTION_BUTTONS_t *This = new SMSG_ACTION_BUTTONS_t;
    return This;
}

void SMSG_ACTION_BUTTONS_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32)*120;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_ACTION_BUTTONS); cur += sizeof (uint16);

	for (uint i1 = 0; i1 < 120; i1++)
	{
	    PUT_LE32 (cur, Actions [i1]);
	    cur += sizeof (uint32);
	}

}

CMSG_CAST_SPELL_t::~CMSG_CAST_SPELL_t ()
{
		delete [] Targetstring;

}

CMSG_CAST_SPELL_t *CMSG_CAST_SPELL_t::Create (Socket *socket)
{
    CMSG_CAST_SPELL_t *This = new CMSG_CAST_SPELL_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_CAST_SPELL_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Spellid)) return false;
	// STRUCTLET STRL_SPELL_TARGET 
	if (!socket->GetLE (Targetmask)) return false;
	if (Targetmask & TARGET_FLAG_UNIT || Targetmask & TARGET_FLAG_OBJECT)
	{
		if (!socket->GetLE (Targetunit)) return false;
	}

	if (Targetmask & TARGET_FLAG_ITEM)
	{
		if (!socket->GetLE (Targetitem)) return false;
	}

	if (Targetmask & TARGET_FLAG_SOURCE_LOCATION)
	{
		if (!socket->GetLE (SrcX)) return false;
		if (!socket->GetLE (SrcY)) return false;
		if (!socket->GetLE (SrcZ)) return false;
	}

	if (Targetmask & TARGET_FLAG_DEST_LOCATION)
	{
		if (!socket->GetLE (DestX)) return false;
		if (!socket->GetLE (DestY)) return false;
		if (!socket->GetLE (DestZ)) return false;
	}

	if (Targetmask & TARGET_FLAG_STRING)
	{
		if (!(Targetstring = socket->GetCStr ())) return false;
	}

	// END STRUCTLET STRL_SPELL_TARGET 
    return true;
}

CMSG_SET_SELECTION_t *CMSG_SET_SELECTION_t::Create (Socket *socket)
{
    CMSG_SET_SELECTION_t *This = new CMSG_SET_SELECTION_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_SET_SELECTION_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Gui)) return false;
    return true;
}

CMSG_SET_TARGET_t *CMSG_SET_TARGET_t::Create (Socket *socket)
{
    CMSG_SET_TARGET_t *This = new CMSG_SET_TARGET_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_SET_TARGET_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_ATTACKSTART_t *SMSG_ATTACKSTART_t::Create ()
{
    SMSG_ATTACKSTART_t *This = new SMSG_ATTACKSTART_t;
    return This;
}

void SMSG_ATTACKSTART_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint64);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_ATTACKSTART); cur += sizeof (uint16);
	PUT_LE64 (cur, Attacker); cur += sizeof (uint64);
	PUT_LE64 (cur, Victim); cur += sizeof (uint64);
}

SMSG_ATTACKSTOP_t *SMSG_ATTACKSTOP_t::Create ()
{
    SMSG_ATTACKSTOP_t *This = new SMSG_ATTACKSTOP_t;
    return This;
}

void SMSG_ATTACKSTOP_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint64) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_ATTACKSTOP); cur += sizeof (uint16);
	PUT_LE64 (cur, Attacker); cur += sizeof (uint64);
	PUT_LE64 (cur, Victim); cur += sizeof (uint64);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
}

SMSG_ATTACKERSTATEUPDATE_t *SMSG_ATTACKERSTATEUPDATE_t::Create ()
{
    SMSG_ATTACKERSTATEUPDATE_t *This = new SMSG_ATTACKERSTATEUPDATE_t;
    return This;
}

void SMSG_ATTACKERSTATEUPDATE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint64) + sizeof (uint64) + sizeof (uint32) + sizeof (uint8) + DamageList.Length () * (sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32));

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_ATTACKERSTATEUPDATE); cur += sizeof (uint16);
	PUT_LE32 (cur, AttackFlags); cur += sizeof (uint32);
	PUT_LE64 (cur, Attacker); cur += sizeof (uint64);
	PUT_LE64 (cur, Victim); cur += sizeof (uint64);
	PUT_LE32 (cur, TotalDamage); cur += sizeof (uint32);
	*cur = Count; cur += sizeof (uint8);
	for (int i1 = 0; i1 < DamageList.Length(); i1++)
	{
		PUT_LE32 (cur, DamageList [i1]->Type); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->Float); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->Damage); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->Absorbed); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->VictimState); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->RoundDuration); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->AdditionalSpellDamage); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->AdditionalSpellId); cur += sizeof (uint32);
		PUT_LE32 (cur, DamageList [i1]->AdditionalSpellAbsorbed); cur += sizeof (uint32);
	}

}

CMSG_LOOT_t *CMSG_LOOT_t::Create ()
{
    CMSG_LOOT_t *This = new CMSG_LOOT_t;
    return This;
}

void CMSG_LOOT_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, CMSG_LOOT); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
}

CMSG_LOOT_t *CMSG_LOOT_t::Create (Socket *socket)
{
    CMSG_LOOT_t *This = new CMSG_LOOT_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_LOOT_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

CMSG_LOOT_RELEASE_t *CMSG_LOOT_RELEASE_t::Create (Socket *socket)
{
    CMSG_LOOT_RELEASE_t *This = new CMSG_LOOT_RELEASE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_LOOT_RELEASE_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Guid)) return false;
    return true;
}

SMSG_LOOT_RESPONSE_t *SMSG_LOOT_RESPONSE_t::Create ()
{
    SMSG_LOOT_RESPONSE_t *This = new SMSG_LOOT_RESPONSE_t;
    return This;
}

void SMSG_LOOT_RESPONSE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint8) + sizeof (uint32) + sizeof (uint8) + Items.Length () * (sizeof (uint8) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + 9);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_LOOT_RESPONSE); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	*cur = Type; cur += sizeof (uint8);
	PUT_LE32 (cur, Money); cur += sizeof (uint32);
	*cur = Itemcount; cur += sizeof (uint8);
	for (int i1 = 0; i1 < Items.Length(); i1++)
	{
		*cur = Items [i1]->Slot; cur += sizeof (uint8);
		PUT_LE32 (cur, Items [i1]->Guidsno); cur += sizeof (uint32);
		PUT_LE32 (cur, Items [i1]->Quantity); cur += sizeof (uint32);
		PUT_LE32 (cur, Items [i1]->Displayid); cur += sizeof (uint32);
		memset (cur, 0, sizeof (uint8)*9); cur += 9;
	}

}

SMSG_LOOT_RELEASE_RESPONSE_t *SMSG_LOOT_RELEASE_RESPONSE_t::Create ()
{
    SMSG_LOOT_RELEASE_RESPONSE_t *This = new SMSG_LOOT_RELEASE_RESPONSE_t;
    return This;
}

void SMSG_LOOT_RELEASE_RESPONSE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_LOOT_RELEASE_RESPONSE); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	*cur = Ok; cur += sizeof (uint8);
}

SMSG_LOOT_REMOVED_t *SMSG_LOOT_REMOVED_t::Create ()
{
    SMSG_LOOT_REMOVED_t *This = new SMSG_LOOT_REMOVED_t;
    return This;
}

void SMSG_LOOT_REMOVED_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_LOOT_REMOVED); cur += sizeof (uint16);
	*cur = Slot; cur += sizeof (uint8);
}

SMSG_GOSSIP_MESSAGE_t *SMSG_GOSSIP_MESSAGE_t::Create ()
{
    SMSG_GOSSIP_MESSAGE_t *This = new SMSG_GOSSIP_MESSAGE_t;
    return This;
}

void SMSG_GOSSIP_MESSAGE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + strlen (Text) + 1 + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_GOSSIP_MESSAGE); cur += sizeof (uint16);
	PUT_LE64 (cur, Guid); cur += sizeof (uint64);
	PUT_LE32 (cur, Textid); cur += sizeof (uint32);
	PUT_LE32 (cur, Bpcount); cur += sizeof (uint32);
	PUT_LE32 (cur, Option); cur += sizeof (uint32);
	PUT_LE32 (cur, Icon); cur += sizeof (uint32);
	{
	    size_t _sl = strlen (Text);
	    memcpy (cur, Text, _sl + 1);
	    cur += _sl + 1;
	}
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
}

CMSG_BUG_t::~CMSG_BUG_t ()
{
	delete [] Content;
	delete [] Type;
}

CMSG_BUG_t *CMSG_BUG_t::Create (Socket *socket)
{
    CMSG_BUG_t *This = new CMSG_BUG_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_BUG_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Suggestion)) return false;
	if (!socket->GetLE (Contentlen)) return false;
	if (!(Content = socket->GetCStr ())) return false;
	if (!socket->GetLE (Typelen)) return false;
	if (!(Type = socket->GetCStr ())) return false;
    return true;
}

CMSG_PING_t *CMSG_PING_t::Create (Socket *socket)
{
    CMSG_PING_t *This = new CMSG_PING_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_PING_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Ordinal)) return false;
    return true;
}

SMSG_PONG_t *SMSG_PONG_t::Create ()
{
    SMSG_PONG_t *This = new SMSG_PONG_t;
    return This;
}

void SMSG_PONG_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_PONG); cur += sizeof (uint16);
	PUT_LE32 (cur, Acknowledge); cur += sizeof (uint32);
}

SMSG_AUTH_CHALLENGE_t *SMSG_AUTH_CHALLENGE_t::Create ()
{
    SMSG_AUTH_CHALLENGE_t *This = new SMSG_AUTH_CHALLENGE_t;
    return This;
}

void SMSG_AUTH_CHALLENGE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_AUTH_CHALLENGE); cur += sizeof (uint16);
	PUT_LE32 (cur, Seed); cur += sizeof (uint32);
}

CMSG_AUTH_SESSION_t::~CMSG_AUTH_SESSION_t ()
{
	delete [] Login;
}

CMSG_AUTH_SESSION_t *CMSG_AUTH_SESSION_t::Create (Socket *socket)
{
    CMSG_AUTH_SESSION_t *This = new CMSG_AUTH_SESSION_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_AUTH_SESSION_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Unknown1)) return false;
	if (!socket->GetLE (Unknown2)) return false;
	if (!(Login = socket->GetCStr ())) return false;
	if (!socket->GetLE (Seed)) return false;
	if (!socket->Get (Digest, sizeof (Digest))) return false;
    return true;
}

SMSG_AUTH_RESPONSE_t *SMSG_AUTH_RESPONSE_t::Create ()
{
    SMSG_AUTH_RESPONSE_t *This = new SMSG_AUTH_RESPONSE_t;
    return This;
}

void SMSG_AUTH_RESPONSE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8) + ((ErrorCode == WSE_AUTHENTICATION_SUCCESSFUL) ? (sizeof (uint8) + sizeof (uint32)) : 0);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_AUTH_RESPONSE); cur += sizeof (uint16);
	*cur = ErrorCode; cur += sizeof (uint8);
	if (ErrorCode == WSE_AUTHENTICATION_SUCCESSFUL)
	{
		*cur = Counter; cur += sizeof (uint8);
		PUT_LE32 (cur, 2002); cur += sizeof (uint32);
	}

}

CMSG_ZONEUPDATE_t *CMSG_ZONEUPDATE_t::Create (Socket *socket)
{
    CMSG_ZONEUPDATE_t *This = new CMSG_ZONEUPDATE_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_ZONEUPDATE_t::Parse (Socket *socket)
{
	if (!socket->GetLE (Zone)) return false;
    return true;
}

SMSG_GMTICKET_CREATE_t *SMSG_GMTICKET_CREATE_t::Create ()
{
    SMSG_GMTICKET_CREATE_t *This = new SMSG_GMTICKET_CREATE_t;
    return This;
}

void SMSG_GMTICKET_CREATE_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_GMTICKET_CREATE); cur += sizeof (uint16);
	PUT_LE32 (cur, Id); cur += sizeof (uint32);
}

SMSG_ACCOUNT_DATA_MD5_t *SMSG_ACCOUNT_DATA_MD5_t::Create ()
{
    SMSG_ACCOUNT_DATA_MD5_t *This = new SMSG_ACCOUNT_DATA_MD5_t;
    return This;
}

void SMSG_ACCOUNT_DATA_MD5_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint8)*80;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_ACCOUNT_DATA_MD5); cur += sizeof (uint16);
	memcpy (cur, MD5, sizeof (MD5)); cur += sizeof (MD5);
}

CMSG_REQUEST_ACCOUNT_DATA_t *CMSG_REQUEST_ACCOUNT_DATA_t::Create (Socket *socket)
{
    CMSG_REQUEST_ACCOUNT_DATA_t *This = new CMSG_REQUEST_ACCOUNT_DATA_t;
    if (This->Parse (socket))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_REQUEST_ACCOUNT_DATA_t::Parse (Socket *socket)
{
	if (!socket->GetLE (FileIndex)) return false;
    return true;
}

CMSG_UPDATE_ACCOUNT_DATA_t *CMSG_UPDATE_ACCOUNT_DATA_t::Create (Socket *socket, uint pktlen)
{
    CMSG_UPDATE_ACCOUNT_DATA_t *This = new CMSG_UPDATE_ACCOUNT_DATA_t;
    if (This->Parse (socket, pktlen))
        return This;
    This->DecRef (); return NULL;
}

bool CMSG_UPDATE_ACCOUNT_DATA_t::Parse (Socket *socket, uint pktlen)
{
	if (!socket->GetLE (FileIndex)) return false;
	if (!socket->GetLE (UncompressedSize)) return false;
	CompressedData = new uint8 [CompressedData_Size = pktlen - socket->Chewed ()];
	if (!socket->Get (CompressedData, CompressedData_Size)) return false;
    return true;
}

SMSG_UPDATE_ACCOUNT_DATA_t *SMSG_UPDATE_ACCOUNT_DATA_t::Create ()
{
    SMSG_UPDATE_ACCOUNT_DATA_t *This = new SMSG_UPDATE_ACCOUNT_DATA_t;
    return This;
}

void SMSG_UPDATE_ACCOUNT_DATA_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint32) + CompressedData_Size;

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_UPDATE_ACCOUNT_DATA); cur += sizeof (uint16);
	PUT_LE32 (cur, FileIndex); cur += sizeof (uint32);
	PUT_LE32 (cur, UncompressedSize); cur += sizeof (uint32);
	memcpy (cur, CompressedData, CompressedData_Size); cur += CompressedData_Size;
}

SMSG_GMTICKET_GETTICKET_t *SMSG_GMTICKET_GETTICKET_t::Create ()
{
    SMSG_GMTICKET_GETTICKET_t *This = new SMSG_GMTICKET_GETTICKET_t;
    return This;
}

void SMSG_GMTICKET_GETTICKET_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32) + sizeof (uint32) + sizeof (uint8) + sizeof (uint8);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_GMTICKET_GETTICKET); cur += sizeof (uint16);
	PUT_LE32 (cur, Unknown1); cur += sizeof (uint32);
	PUT_LE32 (cur, Unknown2); cur += sizeof (uint32);
	*cur = Unknown3; cur += sizeof (uint8);
	*cur = Unknown4; cur += sizeof (uint8);
}

SMSG_GMTICKET_SYSTEMSTATUS_t *SMSG_GMTICKET_SYSTEMSTATUS_t::Create ()
{
    SMSG_GMTICKET_SYSTEMSTATUS_t *This = new SMSG_GMTICKET_SYSTEMSTATUS_t;
    return This;
}

void SMSG_GMTICKET_SYSTEMSTATUS_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_GMTICKET_SYSTEMSTATUS); cur += sizeof (uint16);
	PUT_LE32 (cur, Data); cur += sizeof (uint32);
}

SMSG_PERIODICAURALOG_t *SMSG_PERIODICAURALOG_t::Create ()
{
    SMSG_PERIODICAURALOG_t *This = new SMSG_PERIODICAURALOG_t;
    return This;
}

void SMSG_PERIODICAURALOG_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint64) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_PERIODICAURALOG); cur += sizeof (uint16);
	PUT_LE64 (cur, Victim); cur += sizeof (uint64);
	PUT_LE64 (cur, Attacker); cur += sizeof (uint64);
	PUT_LE32 (cur, SpellId); cur += sizeof (uint32);
	PUT_LE32 (cur, TargetCount); cur += sizeof (uint32);
	PUT_LE32 (cur, Damage); cur += sizeof (uint32);
	PUT_LE32 (cur, 5); cur += sizeof (uint32);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
}

SMSG_SPELLNONMELEEDAMAGELOG_t *SMSG_SPELLNONMELEEDAMAGELOG_t::Create ()
{
    SMSG_SPELLNONMELEEDAMAGELOG_t *This = new SMSG_SPELLNONMELEEDAMAGELOG_t;
    return This;
}

void SMSG_SPELLNONMELEEDAMAGELOG_t::Assemble ()
{
	length = sizeof(uint16)+sizeof(uint16) + sizeof (uint64) + sizeof (uint64) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32) + sizeof (uint32);

	data = new uint8 [length]; uint8 *cur = data;
	PUT_BE16 (cur, length - 2); cur += sizeof (uint16);
	PUT_LE16 (cur, SMSG_SPELLNONMELEEDAMAGELOG); cur += sizeof (uint16);
	PUT_LE64 (cur, Victim); cur += sizeof (uint64);
	PUT_LE64 (cur, Attacker); cur += sizeof (uint64);
	PUT_LE32 (cur, SpellId); cur += sizeof (uint32);
	PUT_LE32 (cur, Damage); cur += sizeof (uint32);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
	PUT_LE32 (cur, 0); cur += sizeof (uint32);
}

// --- THE END ---
